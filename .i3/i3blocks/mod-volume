#!/usr/bin/env bash
# Copyright (C) 2014 Julien Bonjean <julien@bonjean.info>
# Copyright (C) 2014 Alexander Keller <github@nycroth.com>
# Copyright (C) 2023 Bruno Franco <github@brnfra.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# The second parameter overrides the mixer selection
# For PulseAudio users, use "pulse"
# For Jack/Jack2 users, use "jackplug"
# For ALSA users, you may use "default" for your primary card
# or you may use hw:# where # is the number of the card desired

# $ fc-list command to list fonts
font_face="'monofurNF'"
#xx-small , x-small , small , medium , large , x-large , xx-large , xxx-large.
font_size="'medium'"

color_on="'#2666A1'"
color_mute="'#BF616A'"

icon_mute='&#xf026;  â•³        '
icon95='&#xf028;  ðŸ­¶'
icon75='&#xf028;  ðŸ­·'
icon50='&#xf028;  ðŸ­¸'
icon25='&#xf027;  ðŸ­¹'
icon_low='&#xf027;  ðŸ­º'
icon_zero='&#xf026;  ðŸ­»'

MIXER="default"
[ -n "$(lsmod | grep pulse)" ] && MIXER="pulse"
[ -n "$(lsmod | grep jack)" ] && MIXER="jackplug"
MIXER="${2:-$MIXER}"
# The instance option sets the control to report and configure
# This defaults to the first control of your selected mixer
# For a list of the available, use `amixer -D $Your_Mixer scontrols`
SCONTROL="${BLOCK_INSTANCE:-$(amixer -D $MIXER scontrols |
    sed -n "s/Simple mixer control '\([A-Za-z ]*\)',0/\1/p" |
    head -n1
    )}"
    #debian ubuntu manjaro etc
    osys=$(cat /etc/os-release | sed -n -r '/^ID=/p' | cut -d "=" -f 2)
    #------------------------------------------------------------------------
    # The first parameter sets the step to change the volume by (and units to display)
    # This may be in in % or dB (eg. 5% or 3dB)
    STEP="${1:-5%}"
    #------------------------------------------------------------------------
    #Using pactl  {{{
    pa_sink="$(pactl list short sinks |  awk '{print $1}' | sed '1q; s/\s//g')"
    pa_adpt="$(pactl list short sinks |  awk '{print $2}')"
    #pa_sink="${pa_sink:0:1}"
    pa-volume() {
    #out
    pactl get-sink-volume "$pa_sink" | grep Volume | awk '{print $5}'
    vol=$(pactl get-sink-volume "$pa_sink" | grep Volume | awk '{print $5}')
    vol=${vol%\%*}
    if [[ $vol -ge 95 ]]
    then
	pactl set-sink-volume "$pa_sink" 95%
    fi
}
pa-mute() {
#is mute?
pactl get-sink-mute "$pa_sink" | cut -d ":" -f 2
}
#}}}
#------------------------------------------------------------------------
capability() { # Return "Capture" if the device is a capture device
    amixer -D $MIXER get $SCONTROL | sed -n "s/  Capabilities:.*cvolume.*/Capture/p"
}
volume() {
    amixer -D $MIXER get $SCONTROL $(capability)
}
format() {
    perl_filter='if (/.*\[(\d+%)\] (\[(-?\d+.\d+dB)\] )?\[(on|off)\]/)'
    perl_filter+='{CORE::say $4 eq "off" ? "MUTE" : "'
    # If dB was selected, print that instead
    perl_filter+=$([[ $STEP = *dB ]] && echo '$3' || echo '$1')
    perl_filter+='"; exit}'
    perl -ne "$perl_filter"
}
#------------------------------------------------------------------------
if [ "$osys" = "ubuntu" ]
then
    case $BLOCK_BUTTON in
	3) pactl set-sink-mute $pa_sink toggle ;;  # right click, mute/unmute
	4) pactl set-sink-volume $pa_sink  +${STEP}  ;; # scroll up, increase
	5) pactl set-sink-volume $pa_sink  -${STEP}  ;; # scroll down, decrease
    esac
else
    case $BLOCK_BUTTON in
	3) amixer -q -D $MIXER sset $SCONTROL $(capability) toggle ;;  # right click, mute/unmute
	4) amixer -q -D $MIXER sset $SCONTROL $(capability) ${STEP}+ unmute ;; # scroll up, increase
	5) amixer -q -D $MIXER sset $SCONTROL $(capability) ${STEP}- unmute ;; # scroll down, decrease
    esac
fi
#------------------------------------------------------------------------
if [ "$osys" = "ubuntu" ]
then
    pam="$(pa-mute)"
    pam=$(echo $pam| sed 's/^\s//g;s/\s$//g')
    pav="$(pa-volume)"
    pav=$(echo $pav| sed 's/^\s//g;s/\s$//g')
    pav="${pav::-1}"
    res="yes"
else
    pv="$(volume | format)"
    nv="${pv::-1}"
    res="MUTE"
fi
get_block() {
if [ "$pam" = "$res" ] || [ "$pv" = "$res" ]; then
    show="<span font=$font_face color=$color_mute size=$font_size >$icon_mute</span>"
    printf "%s\n" "$show"
    exit 0
fi

if [[ $pav -le 0 ]] && [[  ${#pav} -gt 0 ]] ; then
    show="<span font=$font_face color=$color_on size=$font_size >$icon_low</span>"
    printf "%s %s%%" "$show" "$1"
    exit 0
elif [[ $nv -le 0 ]] && [[ ${#nv} -gt 0 ]]; then
    show="<span font=$font_face color=$color_on size=$font_size >$icon_low</span>"
    printf "0%s %s%%" "$show" "$1"
    exit 0
fi 

if [[ $pav -le 25 ]] && [[ ${#pav} -gt 0 ]]; then
    show="<span font=$font_face color=$color_on size=$font_size >$icon25</span>"
    printf "%s %s%%" "$show" "$1"
    exit 0
elif [[ $nv -le 25 ]] && [[ ${#nv} -gt 0 ]]; then
    show="<span font=$font_face color=$color_on size=$font_size >$icon25</span>"
    printf "%s %s%%" "$show" "$1"
    exit 0
fi

if [[ $pav -lt 50 ]] && [[ ${#pav} -gt 0 ]]; then
    show="<span font=$font_face color=$color_on size=$font_size >$icon50</span>"
    printf "%s %s%%" "$show" "$1"
    exit 0
elif [[ $nv -le 50 ]] && [[ ${#nv} -gt 0 ]]; then
    show="<span font=$font_face color=$color_on size=$font_size >$icon50</span>"
    printf "%s %s%%" "$show" "$1"
    exit 0
fi

if [[ $pav -lt 75 ]] && [[ ${#pav} -gt 0 ]]; then
    show="<span font=$font_face color=$color_on size=$font_size >$icon75</span>"
    printf "%s %s%%" "$show" "$1"
    exit 0
elif [[ $nv -le 75 ]] && [[ ${#nv} -gt 0 ]]; then
    show="<span font=$font_face color=$color_on size=$font_size >$icon75</span>"
    printf "%s %s%%" "$show" "$1"
    exit 0
fi

if [[ $pav -lt 101 ]] || [[ $nv -lt 101 ]]; then
    show="<span font=$font_face color=$color_on size=$font_size >$icon95</span>"
    printf "%s %s%%" "$show" "$1"
    exit 0
fi
}

if [ "$osys" = "ubuntu" ]
then
    get_block "$pav"
else
    get_block "$nv"
fi



