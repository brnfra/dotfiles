#!/usr/bin/env bash
# Copyright (C) 2014 Julien Bonjean <julien@bonjean.info>
# Copyright (C) 2014 Alexander Keller <github@nycroth.com>
# Copyright (C) 2023 Bruno Franco <github@brnfra.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#------------------------------------------------------------------------

# The second parameter overrides the mixer selection
# For PulseAudio users, use "pulse"
# For Jack/Jack2 users, use "jackplug"
# For ALSA users, you may use "default" for your primary card
# or you may use hw:# where # is the number of the card desired
MIXER="default"
[ -n "$(lsmod | grep pulse)" ] && MIXER="pulse"
[ -n "$(lsmod | grep jack)" ] && MIXER="jackplug"
MIXER="${2:-$MIXER}"

# The instance option sets the control to report and configure
# This defaults to the first control of your selected mixer
# For a list of the available, use `amixer -D $Your_Mixer scontrols`
SCONTROL="${BLOCK_INSTANCE:-$(amixer -D $MIXER scontrols |
    sed -n "s/Simple mixer control '\([A-Za-z ]*\)',0/\1/p" |
    tail -n1
    )}"

#debian ubuntu manjaro etc
osys=$(cat /etc/os-release | sed -n -r '/^ID=/p' | cut -d "=" -f 2)
#------------------------------------------------------------------------
# The first parameter sets the step to change the volume by (and units to display)
# This may be in in % or dB (eg. 5% or 3dB)
STEP="${1:-5%}"
#------------------------------------------------------------------------
#Using pactl    {{{
pa_source_adp="$(pactl list short sinks | grep "RUNNING" |  awk '{print $2}')"
pa_source_mic="$(pactl list short sources | grep "RUNNING" | grep "$pa_source_adp" | awk '{print $1}')"

pa-volume-mic() {
#in
pactl get-source-volume "$pa_source_mic" | grep Volume | awk '{print $5}'
vol=$(pactl get-source-volume "$pa_source_mic" | grep Volume | awk '{print $5}')
vol=${vol%\%*}
if [[ $vol -ge 95 ]]
then
    pactl set-source-volume "$pa_source_mic" 95%

fi

}

pa-mute-mic() {
#is mute?
pactl get-source-mute "$pa_source_mic" | cut -d ":" -f 2
}

#------------------------------------------------------------------------
#}}}

capability() { # Return "Capture" if the device is a capture device
    amixer -D "$MIXER" get "$SCONTROL" |
	sed -n "s/  Capabilities:.*cvolume.*/Capture/p"
    }

volume() {
    amixer -D $MIXER get $SCONTROL $(capability)
}

format() {
    perl_filter='if (/.*\[(\d+%)\] (\[(-?\d+.\d+dB)\] )?\[(on|off)\]/)'
    perl_filter+='{CORE::say $4 eq "off" ? "MUTE" : "'
    # If dB was selected, print that instead
    perl_filter+=$([[ $STEP = *dB ]] && echo '$3' || echo '$1')
    perl_filter+='"; exit}'
    perl -ne "$perl_filter"
}


if [ "$osys" = "ubuntu" ]
then
    case $BLOCK_BUTTON in
	3) pactl set-source-mute $pa_source_mic toggle ;;  # right click, mute/unmute
	4) pactl set-source-volume $pa_source_mic  +${STEP}  ;; # scroll up, increase
	5) pactl set-source-volume $pa_source_mic  -${STEP}  ;; # scroll down, decrease
    esac
else
    case $BLOCK_BUTTON in
	3) amixer -q -D $MIXER sset $SCONTROL $(capability) toggle ;;  # right click, mute/unmute
	4) amixer -q -D $MIXER sset $SCONTROL $(capability) ${STEP}+ unmute ;; # scroll up, increase
	5) amixer -q -D $MIXER sset $SCONTROL $(capability) ${STEP}- unmute ;; # scroll down, decrease
    esac
fi
#------------------------------------------------------------------------

if [ "$osys" = "ubuntu" ]
then

    pm_mic="$(pa-mute-mic)"
    pm_mic=$(echo $pm_mic | sed 's/^\s//g;s/\s$//g')
    pv_mic="$(pa-volume-mic)"
    pv_mic=$(echo $pv_mic | sed 's/^\s//g;s/\s$//g')
    nv_mic="${pv_mic::-1}"
    res="yes"
else
    pv="$(volume | format)"
    nv="${pv::-1}"
    res="MUTE"
fi

if [ "$pm_mic" = "$res" ] || [ "$pv" = "$res" ]; then
    icon="<span font='monofur NF'  color='#BF616A' size='medium' >&#xf131; </span>"
    echo "$icon"
    exit
else
    if [[ $nv_mic -gt 95 ]] || [[ $nv -gt 95 ]]; then
	icon="<span font='monofur NF' color='#2666A1' size='medium'>&#xf130; █</span>"
    else 
	if [[ $nv_mic -gt 75 ]] || [[ $nv -gt 75 ]]; then
	    icon="<span font='monofur NF' color='#2666A1' size='medium'>&#xf130; ▇</span>"
	else
	    if [[ $nv_mic -gt 50 ]] || [[ $nv -gt 50 ]]; then
		icon="<span font='monofur NF' color='#2666A1' size='medium'>&#xf130; ▅</span>"
	    else
		if [[ $nv_mic -gt 25 ]] || [[ $nv -gt 25 ]]; then
		    icon="<span font='monofur NF' color='#2666A1' size='medium'>&#xf130; ▃</span>"
		else
		    if [[ $nv_mic -gt 0 ]] || [[ $nv -gt 0 ]]; then
			icon="<span font='monofur NF'   color='#2666A1' size='medium'>&#xf130; ▁</span>"
		    else
			icon="<span font='monofur NF'  color='#2666A1' size='medium'>&#xf130;   </span>"
		    fi #0-25
		fi #25-50
	    fi #50-75
	fi #75-99
    fi #99-100
fi #mute


if [ "$osys" = "ubuntu" ]
then
    echo "$icon $pv_mic"
else
    echo "$icon $pv"
fi
