#!/usr/bin/env bash
# Copyright (C) 2014 Julien Bonjean <julien@bonjean.info>
# Copyright (C) 2014 Alexander Keller <github@nycroth.com>
# Copyright (C) 2023 Bruno Franco <github@brnfra.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# $ fc-list command to list fonts
font_face="'monofurNF'"
#xx-small , x-small , small , medium , large , x-large , xx-large , xxx-large.
font_size="'medium'"

color_on="'#2666A1'"
color_mute="'#BF616A'"

icon_mute='&#xf130; ‚ï≥'
icon95='&#xf130; ùç§'
icon75='&#xf130; ùç£'
icon50='&#xf130; ùç¢'
icon25='&#xf130; ùç°'
icon_low='&#xf130; ùç†'
icon_zero='&#xf130;  '

#------------------------------------------------------------------------
# The second parameter overrides the mixer selection
# For PulseAudio users, use "pulse"
# For Jack/Jack2 users, use "jackplug"
# For ALSA users, you may use "default" for your primary card
# or you may use hw:# where # is the number of the card desired
MIXER="default"
[ -n "$(lsmod | grep pulse)" ] && MIXER="pulse"
[ -n "$(lsmod | grep jack)" ] && MIXER="jackplug"
MIXER="${2:-$MIXER}"
# The instance option sets the control to report and configure
# This defaults to the first control of your selected mixer
# For a list of the available, use `amixer -D $Your_Mixer scontrols`
SCONTROL="${BLOCK_INSTANCE:-$(amixer -D $MIXER scontrols |
    sed -n "s/Simple mixer control '\([A-Za-z ]*\)',0/\1/p" |
    tail -n1
    )}"
    #debian ubuntu manjaro etc
    osys=$(cat /etc/os-release | sed -n -r '/^ID=/p' | cut -d "=" -f 2)
    #------------------------------------------------------------------------
    # The first parameter sets the step to change the volume by (and units to display)
    # This may be in in % or dB (eg. 5% or 3dB)
    STEP="${1:-5%}"
    #------------------------------------------------------------------------
    #Using pactl    {{{
    nsinks=$(pactl list short sinks | wc -l)
    if [[ $nsinks -gt 1 ]];then
	pa_source_adp="$(pactl list short sinks | sed -n '2p' | awk '{print $2}')"
	pa_source_mic="$(pactl list short sources | grep "$pa_source_adp" | awk '{print $1}')"
    else
	pa_source_adp="$(pactl list short sinks | awk '{print $2}')"
	pa_source_mic="$(pactl list short sources | grep "$pa_source_adp" | awk '{print $1}')"
    fi
    pa-volume-mic() {
    #in
    pactl get-source-volume "$pa_source_mic" | grep Volume | awk '{print $5}'
    vol=$(pactl get-source-volume "$pa_source_mic" | grep Volume | awk '{print $5}')
    vol=${vol%\%*}
    if [[ $vol -ge 95 ]]
    then
	pactl set-source-volume "$pa_source_mic" 95%
    fi
}
pa-mute-mic() {
#is mute?
pactl get-source-mute "$pa_source_mic" | cut -d ":" -f 2
}
#------------------------------------------------------------------------
#}}}
capability() { # Return "Capture" if the device is a capture device
    amixer -D "$MIXER" get "$SCONTROL" |
	sed -n "s/  Capabilities:.*cvolume.*/Capture/p"
    }
    volume() {
	amixer -D $MIXER get $SCONTROL $(capability)
    }
    format() {
	perl_filter='if (/.*\[(\d+%)\] (\[(-?\d+.\d+dB)\] )?\[(on|off)\]/)'
	perl_filter+='{CORE::say $4 eq "off" ? "MUTE" : "'
	# If dB was selected, print that instead
	perl_filter+=$([[ $STEP = *dB ]] && echo '$3' || echo '$1')
	perl_filter+='"; exit}'
	perl -ne "$perl_filter"
    }
    if [ "$osys" = "ubuntu" ]
    then
	case $BLOCK_BUTTON in
	    3) pactl set-source-mute $pa_source_mic toggle ;;  # right click, mute/unmute
	    4) pactl set-source-volume $pa_source_mic  +${STEP}  ;; # scroll up, increase
	    5) pactl set-source-volume $pa_source_mic  -${STEP}  ;; # scroll down, decrease
	esac
    else
	case $BLOCK_BUTTON in
	    3) amixer -q -D $MIXER sset $SCONTROL $(capability) toggle ;;  # right click, mute/unmute
	    4) amixer -q -D $MIXER sset $SCONTROL $(capability) ${STEP}+ unmute ;; # scroll up, increase
	    5) amixer -q -D $MIXER sset $SCONTROL $(capability) ${STEP}- unmute ;; # scroll down, decrease
	esac
    fi
    #------------------------------------------------------------------------
    if [ "$osys" = "ubuntu" ]
    then
	pm_mic="$(pa-mute-mic)"
	pm_mic=$(echo $pm_mic | sed 's/^\s//g;s/\s$//g')
	pv_mic="$(pa-volume-mic)"
	pv_mic=$(echo $pv_mic | sed 's/^\s//g;s/\s$//g')
	nv_mic="${pv_mic::-1}"
	res="yes"
    else
	pv="$(volume | format)"
	nv="${pv::-1}"
	res="MUTE"
    fi
    get_block() {
	if [ "$pm_mic" = "$res" ] || [ "$pv" = "$res" ]; then
	    show="<span font=$font_face color=$color_mute size=$font_size >$icon_mute</span>"
	    printf "%s\n" "$show"
	    exit 0
	fi

	if [[ $nv_mic -le 0 ]] && [[  ${#nv_mic} -gt 0 ]] ; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon_zero</span>"
	    printf "%s%s%%" "$show" "$1"
	    exit 0
	elif [[ $nv -le 0 ]] && [[ ${#nv} -gt 0 ]]; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon_zero</span>"
	    printf "%s%s" "$show" 
	    exit 0
	fi 

	if [[ $nv_mic -le 10 ]] && [[  ${#nv_mic} -gt 0 ]] ; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon_low</span>"
	    printf "%s%s" "$show" 
	    exit 0
	elif [[ $nv -le 10 ]] && [[ ${#nv} -gt 0 ]]; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon_low</span>"
	    printf "%s%s%%" "$show" "$1"
	    exit 0
	fi 

	if [[ $nv_mic -le 35 ]] && [[ ${#nv_mic} -gt 0 ]]; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon25</span>"
	    printf "%s%s%%" "$show" "$1"
	    exit 0
	elif [[ $nv -le 35 ]] && [[ ${#nv} -gt 0 ]]; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon25</span>"
	    printf "%s %s%%" "$show" "$1"
	    exit 0
	fi

	if [[ $nv_mic -lt 60 ]] && [[ ${#nv_mic} -gt 0 ]]; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon50</span>"
	    printf "%s%s%%" "$show" "$1"
	    exit 0
	elif [[ $nv -le 60 ]] && [[ ${#nv} -gt 0 ]]; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon50</span>"
	    printf "%s%s%%" "$show" "$1"
	    exit 0
	fi

	if [[ $nv_mic -lt 85 ]] && [[ ${#nv_mic} -gt 0 ]]; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon75</span>"
	    printf "%s%s%%" "$show" "$1"
	    exit 0
	elif [[ $nv -le 85 ]] && [[ ${#nv} -gt 0 ]]; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon75</span>"
	    printf "%s%s%%" "$show" "$1"
	    exit 0
	fi

	if [[ $nv_mic -lt 101 ]] || [[ $nv -lt 101 ]]; then
	    show="<span font=$font_face color=$color_on size=$font_size >$icon95</span>"
	    printf "%s%s%%" "$show" "$1"
	    exit 0
	fi
    }

    if [ "$osys" = "ubuntu" ]
    then
	get_block "$nv_mic"
    else
	get_block "$nv"
    fi


