#!/usr/bin/env bash
# Create a new directory and enter it {{{
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# }}}
# Safe mv and rm cmd {{{
del() {
    if cp -r "$@" "$HOME"'/.local/share/Trash/files'; then
	rm -rf "$@"
	echo "$* deleted"
    else
	echo "$*: No such file or directory"
    fi
}

move() {
    if cp -r "$@" "$HOME"'/.local/share/Trash/files'; then
	mv -i "$@" "$2"
	echo "$* copyed"
     else
	echo "$*: No such file or directory"
    fi

}

clean() {
    if [ "$osys" = "debian" ] || [ "$osys" = "ubuntu" ]; then
	sudo apt-get autoremove -y && sudo apt-get autoclean && sudo apt-get clean;
    elif [ "$osys" = "manjaro" ]; then
	echo "for packages run bmenu"
    fi
    sudo rm -rf /var/log/*.log* 
    sudo rm -rf /var/log/syslog*
    
    printf "%s" "~/.cache/ [Before]: "
    du -sh ~/.cache/ | awk '{print $1}'
    
    find ~/.cache/ -type f -atime +100 -delete
    
    printf "%s" "~/.cache/ [After]: "
    du -sh ~/.cache/ | awk '{print $1}'
    
    printf "%s" "Before: "
    sudo journalctl --disk-usage
    
    sudo journalctl --vacuum-size=50M
    sudo journalctl --vacuum-time=7d
    
    printf "%s" "After: "
    sudo journalctl --disk-usage
    
    rm -rf "$HOME/.cache/thumbnails/*"
    rm "$HOME/.vim/.viminfo"
    rm "$HOME/.viminfo"
    [ -e "$HOME/.vim/.viminfo.tmp" ]; rm "$HOME/.vim/.viminfo.tmp"
    rm -rf "$HOME/.local/share/Trash/files"
    mkdir "$HOME/.local/share/Trash/files"
    rm -rf "$HOME/.local/share/Trash/files"
    mkdir "$HOME/.local/share/Trash/files"
    rm -rf "$HOME/.local/share/vifm/Trash"
    mkdir "$HOME/.local/share/vifm/Trash"
    rm -rf "$HOME/.vim/backups/swaps"
    mkdir "$HOME/.vim/backups/swaps"
    rm -rf "$HOME/.vim/backups/undo"
    mkdir "$HOME/.vim/backups/undo"
}
# }}}
debug() { #{{{
    shellcheck "$1"
    awk '{ n = gsub(/"/, "&"); if (n % 2 == 1) print NR ": " $0 }' "$1" # this double quote for tests->["]
}

# #}}}
# Where is a function defined? {{{
whichfunc() {
    whence -v $1
    type -a $1
}

#}}}
# Create a SymLink {{{
function symlink() {
    #Original code from https://github.com/lewagon/dotfiles/blob/master/install.sh
    TARGET=$1
    TARGET=${TARGET%/}
    if [ "$2" = "" ]; then
	LINK_NAME=${TARGET##*/}
	if [ ! -e "$LINK_NAME" ] && [ -e "$TARGET" ]; then
	    echo "Symlink: $LINK_NAME ---> $TARGET"
	    ln -s "$TARGET" "$LINK_NAME"
	else
	    echo "[ERROR] Symlink $LINK_NAME already exists or $TARGET doesn't exist"
	fi
    else
	LINK_NAME="$2"
	if [ ! -e "$LINK_NAME" ] && [ -e "$TARGET" ]; then
	    echo "Symlink: $LINK_NAME ---> $TARGET"
	    ln -s "$TARGET" "$LINK_NAME"
	else
	    echo "[ERROR] Symlink $LINK_NAME already exists or $TARGET doesn't exist"
	fi
    fi
}
function dot_stow() {
    local here="$(pwd)"
    source ~/bin/dotfiles_env
    cd "$dotfiles_dir" || exit 1
    if which stow &> /dev/null && [ "$(pwd)" = "$dotfiles_dir" ];then
	stow --dotfiles --adopt -t "$HOME" .
	cInfo "stowed"
    else
	cError "Package" "stow" "not installed."
    fi
    cd "$here"
    unset here
    unset -f ~/bin/dotfiles_env
}
function redot_stow() {
    local here="$(pwd)"
    source ~/bin/dotfiles_env
    cd "$dotfiles_dir" || exit 1
     if which stow &> /dev/null && [ "$(pwd)" = "$dotfiles_dir" ];then
	stow -R --dotfiles --adopt --target=$HOME .
    else
	cError "Package" "stow" "not installed."
    fi
    cd "$here"
    unset here
    unset -f ~/bin/dotfiles_env
}
function deldot_stow() {
    local here="$(pwd)"
    source ~/bin/dotfiles_env
    cd "$dotfiles_dir" || exit 1
    if which stow &> /dev/null && [ "$(pwd)" = "$dotfiles_dir" ];then
	stow -D --dotfiles --adopt -target=$HOME .
    else
	cError "Package" "stow" "not installed."
    fi
    cd "$here"
    unset here
    unset -f ~/bin/dotfiles_env
}
# }}}
# Create a backup {{{
# Define a function which rename a `target` file to `target.backup` if the file
# exists and if it's a 'real' file, ie not a symlink
#Original code from https://github.com/lewagon/dotfiles/blob/master/install.sh
function backup() {
    target=$1
    if [ -e "$target" ]; then
	if [ ! -L "$target" ]; then
	    mv "$target" "$target.backup"
	    echo "-----> Moved your old $target config file to $target.backup"
	fi
    fi
}

# }}}
# DIG {{{
# Run `dig` and display the most useful info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

#}}}
# OPEN {{{
# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
	# Ubuntu on Windows using the Linux subsystem
	alias open='explorer.exe';
    else
	alias open='xdg-open';
    fi
fi
# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
	open .;
    else
	open "$@";
    fi;
}

function aplay() {
    # vlc --play-and-exit --no-loop --no-repeat $1 &> /dev/null
    ffplay -nodisp -autoexit $1 &> /dev/null
}

function vplay () {
    vlc --play-and-exit --no-loop --no-repeat $1 &> /dev/null
    #ffplay -autoexit $1 &> /dev/null
}

# }}}
# TREE {{{
# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
# }}}    
# search avaliable packages to install {{{
#
# }}}
#search for non-free installed packages {{{
function pnonfree ()
{
    dpkg-query -W -f='${Section}\t{Package}\n' | sort -u;
}

# }}}
#search for contrib installed packages {{{
function pcontrib ()
{
    dpkg-query -W -f='${Section}\t{Package}\n' | grep ^contrib;
}

# }}}
#APT aliases {{{
if [ "$osys" = "debian" ] || [ "$osys" = "ubuntu" ]; then
    function psearch () {
	apt-cache search ""	|  fzf +m -i -e \
	    --prompt='------> ' \
	    --header='Pkg-Name - Description:' \
	    --height=80% \
	    --border \
	    --hscroll-off=800 \
	    --preview="apt-cache show ^{1}$" \
	    --preview-window=wrap \
	    --bind="tab:toggle-preview" \
	    | cut -d " " -f 1 \
	    | xargs -ro sudo apt-get install
	}

    # Show installed packages 
    function plist () {
	apt list --installed \
	    | awk '{print $1}' \
	    | cut -f1 -d '/' \
	    | fzf +m -i -e  \
	    --height=80% \
	    --border \
	    --hscroll-off=800 \
	    --preview="apt-cache show {1}" \
	    --preview-window=wrap \
	    --bind="tab:toggle-preview" ;
	}

    # 
#package info dependencies  
function depends() {
    apt list --installed \
	| awk '{print $1}' \
	| cut -f1 -d '/' \
	| fzf +m -i -e  \
	--height=80% \
	--border \
	--hscroll-off=800 \
	--preview="aptitude why {1} " \
	--preview-window=wrap \
	--bind="tab:toggle-preview" ;
    }

    function auto_complete_apt() {
	mapfile -t COMPREPLY < <(apt-cache --no-generate pkgnames "$2");
    }

    complete -F auto_complete_apt get
    complete -F auto_complete_apt psearch
    complete -F auto_complete_apt pinfo
    complete -F auto_complete_apt plist
    complete -F auto_complete_apt pdeps

#}}} 
# {{{ pacman alias
#
elif [ "$osys" = "manjaro" ]; then
    function psearch () {
	pacman -Ss | sed '/^[[:space:]]/d' | awk '{print $1}' \
	    | fzf \
	    --multi \
	    --preview 'pacman -Si {1}' \
	    --height=80% \
	    --border \
	    --hscroll-off=800 \
	    --preview-window=wrap \
	    --bind="tab:toggle-preview" \
	    | xargs -ro sudo pacman -S
	}

	function fremove () {
	    pacman -Qq \
		| fzf \
		--multi \
		--preview 'pacman -Si {1}' \
		--height=80% \
		--border \
		--hscroll-off=800 \
		--preview-window=wrap \
		--bind="tab:toggle-preview" \
		| xargs -ro sudo pacman -Rns
	    }


    function plist () {
	pacman -Qq \
	    | fzf \
	    --multi \
	    --preview 'pacman -Si {1}' \
	    --height=80% \
	    --border \
	    --hscroll-off=800 \
	    --preview-window=wrap \
	    --bind="tab:toggle-preview"
	}

    function auto_complete_pacman() {
	mapfile -t COMPREPLY < <(pacman -Si "$1");
    }

    complete -F auto_complete_pacman get
    complete -F auto_complete_pacman pdeps
    complete -F auto_complete_pacman pinfo
    complete -F auto_complete_pacman plist


    # function pinfo ()
    # {
    # pacman -Si | fzf --multi --preview 'pacman -Qi {1}' --height=80% --border --hscroll-off=800 --preview-window=wrap --bind="tab:toggle-preview"
    # }
#}}}
#{{{ opensuse
elif [ "$osys" = "$opensuse" ]; then
        function psearch () {
	    zypper search | cut -d '|' -f2 \
		| fzf \
		--multi \
		--preview 'zypper info {1}' \
		--height=80% \
		--border \
		--hscroll-off=800 \
		--preview-window=wrap \
		--bind="tab:toggle-preview" \
		| xargs -ro sudo zypper install
	}

	function fremove () {
	    zypper search --installed-only | cut -d '|' -f2 \
		| fzf \
		--multi \
		--preview 'zypper if {1}' \
		--height=80% \
		--border \
		--hscroll-off=800 \
		--preview-window=wrap \
		--bind="tab:toggle-preview" \
		| xargs -ro sudo zypper rm
	    }


        function plist () {
	    zypper packages | cut -d '|' -f3  \
		| fzf \
		--multi \
		--preview 'zypper if {1}' \
		--height=80% \
		--border \
		--hscroll-off=800 \
		--preview-window=wrap \
		--bind="tab:toggle-preview"
	}

    function auto_complete_pacman() {
	mapfile -t COMPREPLY < <(zypper if "$1");
    }

    complete -F auto_complete_zp get
    complete -F auto_complete_zp pdeps
    complete -F auto_complete_zp pinfo
    complete -F auto_complete_zp plist


    # function pinfo ()
    # {
    # pacman -Si | fzf --multi --preview 'pacman -Qi {1}' --height=80% --border --hscroll-off=800 --preview-window=wrap --bind="tab:toggle-preview"
    # }
fi
# }}}
# FZF FUNCTIONS {{{
function open_with_fzf () {
    fd -t f -H -I \
	| fzf -e -m \
	--preview="xdg-mime query default {}" \
	| xargs -ro -d "\n" -I "{}" bash -c "xdg-open {} "    
	    #2>&-
	
}

function cd_with_fzf () {
    cd $HOME && cd "$(fd -H -t d | fzf -e --preview="tree -L 1 {}" --bind="space:toggle-preview")"
}

# do not use yet
# function pacs () {
#     pcmanfm -Syy $(pcmanfm -Ssq | fzf -m --preview="pcmanfm -Si {}" --preview-window=:hidden --bind=space:toggle-preview)
# }
# Display a man page using fzf and fd. usually /usr/share/man
function man_find () {
    MANPATH='/usr/share/man'
    fd . $MANPATH/man${1:-1} -t f -x echo {/.} \
	| fzf \
	--multi \
	--prompt="Man${1:-1}" \
	--preview 'man {1}' \
	--height=80% \
	--border \
	--hscroll-off=800 \
	--preview-window=wrap \
	--bind="tab:toggle-preview" \
	| man
    }

function fman () {
	man -k . \
	    | fzf \
	    --multi \
	    --prompt='Man> ' \
	    --preview 'man {1}' \
	    --height=80% \
	    --border \
	    --hscroll-off=800 \
	    --preview-window=wrap \
	    --bind="tab:toggle-preview" \
	    | awk '{print $1}' | xargs -r man
	}

function fh () {
	cat ~/.bash_history \
	    | sort -u \
	    | fzf -i \
	    | xargs -ro -d "\n" -I "{}"  bash -c "echo {} | xclip -i -selection clipboard" 

	xclip -o -selection "clipboard" | xargs -ro -d "\n" -I "{}"  bash -c "{}" 
 
}

function search_in () {
	cat "$1" | fzf -m -e \
	    --preview "grep -nw -A 14 -B 14 --color=always -e {..} $1" \
	    --preview-window=wrap \
	    --height=80% \
	    --bind="tab:toggle-preview" \
	    --border 
	    
}
	# }}}
