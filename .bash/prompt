#!/usr/bin/env bash
bind '"\C-f":"cd_with_fzf\n"'
bind '"\C-o":"open_with_fzf\n"'
bind '"\C-n":"nvim\n"'
#bind '"\C-m":"vim\n"'
#Prompt git					    {{{
git_branch() {
    local s='';
    local branchName='';
    if git rev-parse --is-inside-work-tree &>/dev/null || return; then
	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
	    git describe --all --exact-match HEAD 2> /dev/null || \
	    git rev-parse --short HEAD 2> /dev/null || \
	    echo '(unknown)')";
		    # Early exit for Chromium & Blink repo, as the dirty check takes too long.
		    # Thanks, @paulirish!
		    # https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
		    # Check for uncommitted changes in the index.
		    if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='Files!';
		    fi;
		    # Check for unstaged changes.
		    if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='Files+';
		    fi;
		    # Check for untracked files.
		    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='Files?';
		    fi;
		    # Check for stashed files.
		    if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='Refs++';
		    fi;
		    [ -n "${s}" ] && s="[${s}]";
		    printf "%-*b" ${#branchName} "${1}▛▔[${branchName}]▁▟${2}▛▔${s}▁▟";
		else
		    [ -n "${s}" ] && s="[${s}]";
		    printf "%-*b" ${#branchName} "${1}▛▔[${branchName}]▁▟${2}▛▔${s}▁▟";
    fi
}
# }}}
# Set Colors {{{
# Color
E='\e['

italic="\[${E}3m\]"
reset="\[${E}0m\]"
blink="\[${E}5m\]"
inverted="\[${E}7m\]"
bold="\[${E}1m\]"
# Set foreground colors
cyan="\[${E}96m\]"
violet="\[${E}95m\]"
white="\[${E}99m\]"
yellow="\[${E}93m\]"
red="\[${E}91m\]"
lgray="\[${E}37m\]"

build_prompt() {
   
    PS1="${inverted}${italic}${lgray}▛▔\u@\h▁▟${cyan}▛▔${bold}\w▁▟";	
    PS1+="$(git_branch $yellow $violet)"
    PS1+="${reset}${white}\n${blink}${bold} → ${reset}";	    

    PS2="${yellow}\u@\h \W → ${reset}";
}
#   {{{
if [[ "${SSH_TTY}" ]]; then
    PS1+="${bold}${red}";
else
    PS1+="${yellow}";
fi;
# }}}
PROMPT_COMMAND=build_prompt
# }}}
