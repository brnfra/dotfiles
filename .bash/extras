#!/usr/bin/env bash

# Compare original and gzipped file size {{{
function gz() {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}
# }}}
# GETCERTNAMES  {{{
# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
	echo "ERROR: No domain specified.";
	return 1;
    fi;
    local domain="${1}";
    echo "Testing ${domain}â€¦";
    echo ""; # newline
    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);
    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
	local certText=$(echo "${tmp}" | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, no_serial, no_sigdump, no_signame, no_validity, no_version")
	echo "Common Name:"
	echo ""; # newline
	echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
	echo ""; # newline
	echo "Subject Alternative Name(s):"
	echo ""; # newline
	echo "${certText}" | grep -A 1 "Subject Alternative Name:" | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
	return 0
    else
	echo "ERROR: Certificate not found."
	return 1
    fi;
}
# }}}
# Start a PHP server from a directory, optionally specifying the port {{{
# (Requires PHP 5.4.0+.)
function phpserver() {
    local port="${1:-4000}";
    local ip=$(ipconfig getifaddr en1);
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}";
}
# }}}
# GIT  {{{
function clone ()
{
    CLONED=$(echo "${1}"| cut -f2 -d "/")
    CLONED="${CLONED%.*}"
    GIT="$HOME/Documents/Projects/git"
    if [ -d "$GIT" ];then
	cd "$GIT" || return
	git clone "${1}" && echo "alias $CLONED=\"cd $GIT/$CLONED\"" >> $HOME/.bash/aliases || echo "Git clone failed!"
    else
	printf "[ERROR] No %s found." "$GIT"
	cd "$GIT" || mkdir -p "$GIT" && cd "$GIT" || return
    fi
    unset CLONED
    unset GIT
}
# }}}
# Counters (minutes) {{{
function countdown ()
{
    MINS=$(($1 * 60))
    STARTCOUNT=$(($(date +%s) + $MINS));
    while [[ "$STARTCOUNT" -ge $(date +%s) ]]; do
	echo -ne "$(date -u --date @$(($STARTCOUNT - $(date +%s))) +%H:%M:%S)\r";
	sleep 0.01
	read -s -n 1 -t 0.001 pause
	if [[ $pause = "p" ]];then
	    clear
	    pause=""
	    STARTPAUSE=$(($(date +%s)))
	    # next line is just for TEST
	    #  tempo=$(time -p read -s -n 1 -p "Press some key to continue...")
	    read -s -n 1 -p "Press some key to continue..."
	    clear
	    ENDPAUSE=$(($(date +%s)))
	    DELTA=$(($ENDPAUSE - $STARTPAUSE))
	    STARTCOUNT=$(($STARTCOUNT + $DELTA))
	fi
    done
    clear
    echo "Countdown finish"
    eval 'notify-send --urgency=low "Counter" "The $1 minutes is over" | wall'
    eval 'ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/complete.oga &> /dev/null'
}
function stopwatch () {
    STARTCOUNT=$(($(date +%s)));
    while true; do
	echo -ne "$(date -u --date @$(($(date +%s) - STARTCOUNT)) +%H:%M:%S)\r";
	sleep 0.1
	read -s -n 1 -t 0.001 pause
	if [[ $pause = "p" ]];then
	    clear
	    pause=""
	    STARTPAUSE=$(($(date +%s)))
	    # next line is just for TEST
	    #  tempo=$(time -p read -s -n 1 -p "Press some key to continue...")
	    read -s -n 1 -p "Press some key to continue..."
	    clear
	    ENDPAUSE=$(($(date +%s)))
	    DELTA=$(($ENDPAUSE - $STARTPAUSE))
	    STARTCOUNT=$(($STARTCOUNT + $DELTA))
	fi
    done
}
# }}}
# logs{{{
function logs() {
    # Color
    local E='\e['

    local italic="${E}3m"
    local reset="${E}0m"
    local blink="${E}5m"
    local inverted="${E}7m"
    local bold="${E}1m"
    # Set foreground colors
    local cyan="${E}96m"
    local violet="${E}95m"
    local white="${E}99m"
    local red="${E}31m"
    local green="${E}32m"
    local yellow="${E}33m"
    local blue="${E}34m"
    local lgray="${E}37m"
       
    echo -e "\n${yellow}Stage backup${reset}\n"
    cat ~/.config-bkp/stage-bkp.log
    echo -e "\n${yellow}Wallpapers${reset}\n"
    cat ~/.config-bkp/wallpapers.log
    echo -e "\n${yellow}Upgrade logs${reset}\n"
    cat ~/.cache/is_upgraded
    cat ~/.cache/upgrade-distro-cron.sh-refresh-note-cron.log
    echo -e "\n${yellow}Cron logs${reset}\n"
    cat /var/log/upgrade-distro-cron.sh-refresh-dry-run.log
    cat /var/log/upgrade-distro-note-cron.log
    cat /var/log/refresh-note-cron.log

    unset E
    unset italic
    unset reset
    unset blink
    unset inverted
    unset bold
    unset cyan
    unset violet
    unset white
    unset red
    unset green
    unset yellow
    unset blue
    unset lgray
}
#}}}
