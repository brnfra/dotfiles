#!/usr/bin/env bash
# Arquivo: install
# Autor: Bruno Franco
# Download: git@github.com:brnfra
# Ultima_modificacao: 10-04-2025
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# code providing by ;
#  - originally by user StreakyCobra in https://news.ycombinator.com/item?id=11070797
#  - in your wonderful tutorial, Nicola Paolucci, in https://www.atlassian.com/git/tutorials/dotfiles
backto=$(pwd)
# make executables in src/ visible to PATH
# Color {{{ 
# escape
E='\e['
italic="${E}3m"
reset="${E}0m"
bold="${E}1m"
# Set foreground colors
red="${E}31m"
green="${E}32m"
cyan="${E}36m"
grey="${E}2m"

cInfo() {
    printf "%b%s%b" "$grey" "[INFO]" "$reset " 
    printf "%s" "$1" 
    printf "%b%b%b %s%b " "$cyan" "$bold" "$italic" "$2" "$reset" 
    printf "%s\n" "$3" 

}
cError() {
    printf "%b%s%b " "$red" "[FAIL]" "$reset" 
    printf "%s" "$1" 
    printf "%b%b%b %s%b " "$cyan" "$bold" "$italic" "$2" "$reset" 
    printf "%s\n" "$3" 

}
cItalic() {
    printf "%b%b%b %s%b " "$cyan" "$bold" "$italic" "$1" "$reset" 
    printf "%s" "$2"
}
cOk() {
    printf "%b%s%b " "$green" "[ OK ]" "$reset" 
    printf "%s" "$1"
}
cmOk() {
    printf "%b%s%b " "$green" "[ OK ]" "$reset" 
    printf "%s\n" "$1" 
}
#}}}
#install_check {{{
install_check() {
    printf "[INFO]Executing %s requirements.\n" "${FUNCNAME[0]}"
    local git='which git'
    local curl='which curl'
    local ssh='which ssh'
    local stow='which stow'
    #packages
    if ! $git &> /dev/null;then
	cError "Git not found. Abort."
	exit 2	
    fi
    if ! $curl &> /dev/null;then
	cError "Curl not found. Aborting install"
	exit 3	
    fi
    if ! $ssh &> /dev/null;then
	cError "Ssh not found. Abort."
	exit 4	
    fi
    if ! $stow &> /dev/null;then
	cError "Stow not found. Abort."
	exit 5	
    fi
    unset git
    unset curl
    unset ssh
    unset stow
    
    # if there are definitions file 
    if [ -f "$HOME/bin/dotfiles_env" ]; then
	cd "$HOME/bin" || return
	# shellcheck source=dotfiles_env
	. dotfiles_env

    else
	DIR="$HOME/bin"
	mkdir "$DIR"
	cd "$DIR" || return
	PATH="$DIR/../src:$PATH"

	if curl -O --max-time 15  "https://raw.githubusercontent.com/brnfra/dotfiles/main/bin/dotfiles_env"
	then
	    # shellcheck source=dotfiles_env
	    source dotfiles_env
	else
	    printf "[ERROR] dotfiles_env doesn't exist and can't download from repository.\n"
	    exit 1
	fi
    fi
    if [ -d "$dotfiles_dir" ]; then
	mkdir -p "${HOME}/${dir}"
	cInfo "Created" "$dotfiles_dir" "folder".
    else
	cmOk "Folder" "$dotfiles_dir" 
    fi
  
    cInfo "${FUNCNAME[0]}" "Done"
}
##}}}
cd "$HOME" || return
cInfo "Installing" "brnfra" "dotfiles."

install_check
cInfo "Git clone (dotfiles):" "$branch" "in $dotfiles_dir"
if git clone -v --single-branch -b "$branch" "$repository" "$dotfiles_dir"; then
    cmOk "Git clone"
    cd "$dotfiles_dir" || return
    if stow --dotfiles --adopt --target=$HOME . ;then
	cInfo "Symlinks created"
    else
	cError "Stow"
	exit 5
    fi
    bare_repo_checkout
    printf "[INFO] Script %s - finish.\n" "${0##*/}"  
else
    cError "Can't clone repository"
    printf "[ERROR] Can't clone repository. %s - fail\n" "${0##*/}" 
    exit 1
fi

unset E
unset italic
unset reset
unset bold
unset red
unset green
unset cyan
unset grey

cd "$backto" || return

