#!/usr/bin/env bash
# Arquivo: install
# Autor: Bruno Franco
# Ultima_modificacao: 03-03-2023
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# code providing by ;
#  - originally by user StreakyCobra in https://news.ycombinator.com/item?id=11070797
#  - in your wonderful tutorial, Nicola Paolucci, in https://www.atlassian.com/git/tutorials/dotfiles

cd "$HOME" || return
# Change for your Data  
local=$(pwd)
user_name="brnfra"
repository="https://github.com/$user_name/dotfiles.git"
bkpdir="$HOME"/.config-bkp
config_dir="$HOME"/.dotfiles
branch="main"
email="devlabbr@gmail.com"
checkHome="$HOME/tests/checkHomeConfigFilesTest.sh"
# Color {{{ 
function cInfo {
    local reset
    local bold
    local cyan
    reset=$(tput sgr0);
    bold=$(tput bold);
    cyan=$(tput setaf 39);
    printf "%s%s[INFO] %s %s" "$cyan" "$bold" "$reset" "$1" 
}
function cError {
    local reset
    local bold
    local red
    reset=$(tput sgr0);
    bold=$(tput bold);
    red=$(tput setaf 124);
    printf "%s%s[ERROR] %s %s" "$red" "$bold" "$reset" "$1" 
}
function cOk {
    local reset
    local bold
    local green
    reset=$(tput sgr0);
    bold=$(tput bold);
    green=$(tput setaf 34);
    printf "%s%s OK \n%s" "$green" "$bold" "$reset" 
}
function cItalic {
    local cyan
    local italic
    local reset
    cyan=$(tput setaf 39);
    italic=$(tput sitm);
    reset=$(tput sgr0);
    printf "%s%s %s %s %s" "$cyan" "$italic" "$1" "$reset" "$2"
}
# }}}
# Clean *.backup {{{ 
function cleanbkp {
    folders="$HOME "
    folders+="$HOME/.bash "
    folders+="$HOME/.config/nvim "
    folders+="$HOME/.config/vifm "
    folders+="$HOME/.config/vifm/scripts "
    folders+="$HOME/.config/vifm/colors "
    folders+="$HOME/.config/xfce4/terminal "
    folders+="$HOME/.i3 "
    folders+="$HOME/.i3/autostart  "
    folders+="$HOME/.i3/i3blocks "
    folders+="$HOME/.config/rofi "
    folders+="$HOME/.config/rofi/themes "
    folders+="$HOME/.config/ranger "
    folders+="$HOME/.config/ranger/rc.conf "
    folders+="$HOME/.config/ranger/scope.sh "
    folders+="$HOME/.config/ranger/devicons.py "
    folders+="$HOME/.config "
    folders+="$HOME/.config/compton "
    folders+="$HOME/bin "
    folders+="$HOME/tests/ "

    cInfo "Moving files .backup to "
    cItalic "$bkpdir"
    printf "\n"
    for folder in $folders; do
	find "$folder" -maxdepth 1 -name "*.backup" -type f | xargs -I {} mv {} "$bkpdir"
    done
}
# }}}
# Run env scripts {{{ 
function make_env {
    if [ -d "$bkpdir" ]
    then
	cInfo
	cItalic  "$bkpdir" "already exists."
	printf "\n" 
    else
	cError "Can't clean Backup files."
	cItalic "$bkpdir" "no found"
	printf "\n"
	mkdir -p "$bkpdir"
	cInfo 
	cItalic "$bkpdir" "created."
	printf "\n" 
    fi
    cInfo "Install main(--bare):"
    cOk
    cInfo "Installing Enviroment."
    printf "\n"
    if "$HOME/bin/install_enviroment" "$email" "$user_name"; then
	cInfo "Install Enviroment."
	cOk
    fi
    cInfo "Installing Fonts."
    printf "\n"
    if "$HOME/bin/install_fonts"; then
	cInfo "Install Fonts:"
	cOk
    fi
    cInfo "Installing I3config." 
    printf "\n"
    if "$HOME/bin/i3_config_install" "$bkpdir"; then
	cInfo "Install I3config:"
	cOk
    fi
}
# }}}
# test if is installed {{{  
function installTest {
    if [ -d "$config_dir" ]; then
	cError "Already instaled. If you trying reinstall, remove" 
	cItalic "$config_dir" "in order and check outputs log."
	printf "\n"
	
	if "$checkHome" > /dev/null;
	then
	    "$checkHome" | awk '/FAIL/''{print}'
	fi
	exit 1
    fi
}
#}}}
# general test {{{ 
function cfgTests {
    local i3_cfg="$HOME/.i3/config"
    local i3_scpt="$HOME/bin/i3_config_install"

    i3_cfg="$HOME/.i3/config"
    i3_scpt="$HOME/bin/i3_config_install"

    if "$checkHome" > /dev/null;
    then

	"$checkHome" | awk '/FAIL/''{print}'
	if [ -f "$i3_cfg" ] && [ -f "$i3_scpt" ]; then
	    cInfo "I3config and i3 scripts:"
	    cOk
	else
	    cError "I3config not found. Installing config file: "
	    if ! "$i3_scpt" "$bkpdir"; then
		cError "I3config " 
		cItalic "$i3_cfg" " isn't installed " 
		cItalic "$i3_scpt" "exec fail or not found."
		printf "\n" 
	    fi
	    cInfo "I3config file installed."
	    printf "\n"
	fi
    else
	cInfo "Config files and folders checked:"
	cOk
    fi
}
#}}}
function config {
    git --git-dir="$HOME"/.dotfiles/ --work-tree="$HOME" "$@";
}

cd "$HOME" || return
installTest
cInfo "Git clone %s(--bare)." 
cItalic "$branch"
git clone --branch $branch --bare $repository "$HOME/.dotfiles";

cInfo "Git clone"
cItalic "$branch" "(--bare):"
cOk

cInfo "Checkout branch: "
cItalic "$branch"
if config checkout
then
    cInfo "Checkout branch: "
    cItalic "$branch"
    cOk
    make_env 
    cd "$local" || return
    exit 0
else
    cError "Checkout branch: backup files Template=[file_name.backup]" 
    config checkout 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {} mv "$HOME"/{} "$HOME"/{}.backup
    cInfo "Checkout branch, backup files:"
    cOk
    cInfo "Checkout branch:Cleaning and trying again after backup"
    cleanbkp
    if config checkout
    then
	cInfo "Checkout branch:"
	cOk
	config config status.showUntrackedFiles no
	cInfo "Install main(--bare):"
	cOk
	make_env
	cd "$local" || return
	exit 0
    else
	cError "Checkout branch: Exit with error."

	if "$checkHome" > /dev/null;
	then
	    "$checkHome" | awk '/FAIL/''{print}'
	    cInfo "Trying fix install. Removing"
	    cItalic "$config_dir" "folder"
	    rm -rf "$config_dir"
	    cInfo "Installing again."
	    if "$HOME/.config-bkp/install.backup"
	    then
		cd "$local" || return
		exit 0
	    else
		cd "$local" || return
		exit 1
	    fi
	fi
    fi
fi
