#!/usr/bin/env bash
# Arquivo: install
# Autor: Bruno Franco
# Ultima_modificacao: 09-03-2023
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# code providing by ;
#  - originally by user StreakyCobra in https://news.ycombinator.com/item?id=11070797
#  - in your wonderful tutorial, Nicola Paolucci, in https://www.atlassian.com/git/tutorials/dotfiles
if [ -f "$HOME/dotfiles_env" ]
then
    # shellcheck source=~/dotfiles_env
    . dotfiles_env
else
    curl -O --max-time 15  "https://raw.githubusercontent.com/brnfra/dotfiles/testing/bin/dotfiles_env" 
    # shellcheck source=~/dotfiles_env
    . dotfiles_env
fi


nowIn=$(pwd)

# Clean *.backup {{{ 
function cleanbkp {
    folders="$HOME "
    folders+="$HOME/.bash "
    folders+="$HOME/.config/nvim "
    folders+="$HOME/.config/vifm "
    folders+="$HOME/.config/vifm/scripts "
    folders+="$HOME/.config/vifm/colors "
    folders+="$HOME/.config/xfce4/terminal "
    folders+="$HOME/.i3 "
    folders+="$HOME/.i3/autostart  "
    folders+="$HOME/.i3/i3blocks "
    folders+="$HOME/.config/rofi "
    folders+="$HOME/.config/rofi/themes "
    folders+="$HOME/.config/ranger "
    folders+="$HOME/.config/ranger/rc.conf "
    folders+="$HOME/.config/ranger/scope.sh "
    folders+="$HOME/.config/ranger/devicons.py "
    folders+="$HOME/.config "
    folders+="$HOME/.config/compton "
    folders+="$HOME/bin "
    folders+="$HOME/tests/ "

    cInfo "Moving files .backup to "
    clnItalic "$bkpdir"

    for folder in $folders; do
	find "$folder" -maxdepth 1 -name "*.backup" -type f | xargs -I {} mv {} "$bkpdir"
    done
}
# }}}
# Run env scripts {{{ 
function make_env {
    if [ -d "$bkpdir" ]
    then
	cInfo
	clnItalic  "$bkpdir" "already exists."
    else
	cError "Can't clean Backup files."
	clnItalic "$bkpdir" "no found"
	mkdir -p "$bkpdir"
	cInfo 
	clnItalic "$bkpdir" "created."
    fi
    cmOk "Install main(--bare)"
    clnInfo "Installing Enviroment."
    if "$HOME/bin/install_enviroment" "$email" "$user_name"; then
	cmOk "Install Enviroment."
    fi
    clnInfo "Installing Fonts."
    if "$HOME/bin/install_fonts"; then
	cmOk "Install Fonts"
    fi
    clnInfo "Installing I3config." 
    if "$HOME/bin/i3_config_install" "$bkpdir"; then
	cmOk "Install I3config"
    fi
}
# }}}
# test if is installed {{{  
function installTest {
    if [ -d "$install_dir" ]; then
	cError "Already instaled. If you trying reinstall, remove"
	clnItalic "$install_dir" "in order and check outputs log."

	if "$checkHome" > /dev/null;
	then
	    "$checkHome" | awk '/FAIL/''{print}'
	fi
	exit 1
    fi
}
#}}}
# general test {{{ 
function cfgTests {
    local i3_cfg="$HOME/.i3/config"
    local i3_scpt="$HOME/bin/i3_config_install"

    i3_cfg="$HOME/.i3/config"
    i3_scpt="$HOME/bin/i3_config_install"

    if "$checkHome" > /dev/null;
    then

	"$checkHome" | awk '/FAIL/''{print}'
	if [ -f "$i3_cfg" ] && [ -f "$i3_scpt" ]; then
	    cInfo "I3config and i3 scripts"
	else
	    cError "I3config not found. Installing config file "
	    if ! "$i3_scpt" "$bkpdir"; then
		cError "I3config " 
		cItalic "$i3_cfg" " isn't installed " 
		clnItalic "$i3_scpt" "exec fail or not found."
	    fi
	    clnInfo "I3config file installed."
	fi
    else
	cmOk "Config files and folders checked"
    fi
}
#}}}
function config {
    git --git-dir="$install_dir" --work-tree="$HOME" "$@";
}

cd "$HOME" || return
installTest
cInfo "Git clone %s(--bare)." 
clnItalic "$branch"

if git clone --branch "$branch" --bare "$repository" "$install_dir";
then
    cInfo "Git clone"
    cItalic "$branch" "(--bare)"
    cOk
else
    clnError "Can't clone repository"
    exit 1
fi
cInfo "Checkout branch "
cItalic "$branch"
if config checkout
then
    cInfo "Checkout branch "
    cItalic "$branch" ":"
    cOk
    make_env 
    cd "$nowIn" || return
    exit 0
else
    cError "Checkout branch: backup files Template=[file_name.backup]" 
    config checkout 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {} mv "$HOME"/{} "$HOME"/{}.backup
    cmOk "Checkout branch, backup files"
    clnInfo "Checkout branch:Cleaning and trying again after backup"
    cleanbkp
    if config checkout
    then
	cmOk "Checkout branch"
	config config status.showUntrackedFiles no
	cmOk "Install main(--bare)"
	make_env
	cd "$nowIn" || return
	exit 0
    else
	cError "Checkout branch: Exit with error."

	if "$checkHome" > /dev/null;
	then
	    "$checkHome" | awk '/FAIL/''{print}'
	    cInfo "Trying fix install. Removing"
	    cItalic "$install_dir" "folder"
	    rm -rf "$install_dir"
	    cInfo "Installing again."
	    if "$HOME/.config-bkp/install.backup"
	    then
		cd "$nowIn" || return
		exit 0
	    else
		cd "$nowIn" || return
		exit 1
	    fi
	fi
    fi
fi
rm dotfiles_env
