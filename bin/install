#!/usr/bin/env bash
# Arquivo: install
# Autor: Bruno Franco
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# code providing by ;
#  - originally by user StreakyCobra in https://news.ycombinator.com/item?id=11070797
#  - in your wonderful tutorial, Nicola Paolucci, in https://www.atlassian.com/git/tutorials/dotfiles
backto=$(pwd)
# make executables in src/ visible to PATH

git_config() {
    git --git-dir="$install_dir" --work-tree="$HOME" "$@";
}
#install_check {{{
install_check() {
    if [ -f "$HOME/bin/dotfiles_env" ]; then
        cd "$HOME/bin" || return
        # shellcheck source=dotfiles_env
        . dotfiles_env

    else
        DIR="$HOME/bin"
        mkdir "$DIR"
        cd "$DIR" || return
        PATH="$DIR/../src:$PATH"
        
        if curl -O --max-time 15  "https://raw.githubusercontent.com/brnfra/dotfiles/main/bin/dotfiles_env"
        then
            # shellcheck source=dotfiles_env
            source dotfiles_env
        else
            printf "[ERROR] dotfiles_env doesn't exist and can't download from repository.\n"
            exit 1
        fi
    fi
    if [ -d "$install_dir" ]; then
        cError "Already instaled. If you trying reinstall, remove"
        clnItalic "$install_dir" "in order and check outputs log."

        exit 0
    fi
}
##}}}
## backup {{{
backup_cfg_files() {
    mkdir -p "$HOME/.config-bkp/original"
    local BKPDIR="$HOME/.config-bkp/original"
    printf "[INFO]### %s beginning ### backup config file ###\n" "${FUNCNAME[0]}" >> "$bkpLog"
    cInfo "Backup config files:" "bkp_cfg_files"
    # bash
    files='.bashrc .bash/ '
    files+='README.md '
    # vim
    files+='.vimrc .config/nvim/ '
    # vifm
    files+='.config/vifm/vifmrc  '
    files+='.config/vifm/scripts/ '
    files+='.config/vifm/colors/ '
    # terminalrc=
    files+='.config/xfce4/terminal/terminalrc '
    # i3
    files+='.i3/ '
    files+='.i3/autostart/ '
    files+='.i3/i3blocks/ '
    # rofi
    files+='.config/rofi/ .config/rofi/themes/ '
    # gsimplecal
    files+='.config/gsimplecal/config '
    # systemrc
    files+='.wgetrc .curlrc  '
    # git
    files+='.gitconfig '
    files+='.git-completion.bash '
    # compton
    files+='.config/compton/ '
    # tmux
    files+='.tmux.conf '
    # scripts
    files+='bin/ '
    for file in $files; do
	printf "[INFO] Files or folder to stage: (%s)\n" "$file" &>> "$bkpLog"
	newDir="${BKPDIR}/$file"
	mkdir -p "$(echo ${newDir%/*})"
	cp -r "$HOME"/"$file" "${BKPDIR}/${file}" | sed '/^$/d;/./!d' &>> "$bkpLog"
	echo >>"$bkpLog"
    done
    printf "[INFO]%s all done at %s ### stage ###\n" "${FUNCNAME[0]}" "$DATE" >> "$bkpLog"
}
##}}}
##bare_repo_checkout {{{
bare_repo_checkout() {
    cInfo "Git checkout" "$branch"
    backup_cfg_files
    printf "[INFO]%s beginning  ### pull config ###\n" "${FUNCNAME[0]}"  > "$bkpLog"
    git_config stash save "Save config state[Install]" &>> "$bkpLog"
    ##use to undo, to recover last saved#
    ##>>  $ bare stash apply

    if git_config checkout &>> "$bkpLog"; then
        cmOk "Checkout branch"
        bash ~/bin/enviroment_config &>> "$bkpLog" 
        bash ~/bin/config_check &>> "$bkpLog"
        cd "$backto" || return
        exit 0
    else
        DIR="$HOME/bin"
        cd "$DIR" || return
        PATH="$DIR/../src:$PATH"
        cError "Checkout branch:" "$branch" "and backup files."
        git_config checkout 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {} mv "$HOME"/{} "$HOME"/{}.backup &>> "$bkpLog" 
        cmOk "Backup files"
        clnInfo "Checking branch"
        if git_config checkout  &>> "$bkpLog" ;	then
            cmOk "Check branch"
            cmOk "Checkout branch"
            clnInfo "Installing enviroment_config and backup config files"
            source bkp_cfg_files
            git_config config status.showUntrackedFiles no
            bash enviroment_config &>> "$bkpLog" 
            bash bkp_cfg_files &>> "$bkpLog" 
            cmOk "Installation script"
            bash config_check &>> "$bkpLog" 
            cd "$backto" || return
            exit 0
        else
            cError "Checkout branch" "$branch" "Exit with error."
            exit 1
        fi
    fi
}
##}}}
cd "$HOME" || return
install_check
cInfo "Git clone (--bare):" "$branch"
if git clone --depth 1 --branch "$branch" --bare "$repository" "$install_dir"; then
    cmOk "Git clone"
    cd "$HOME/bin" || return
    bare_repo_checkout
else
    clnError "Can't clone repository"
    exit 1
fi
cd "$backto" || return



