#!/usr/bin/env bash
# Arquivo: install
# Autor: Bruno Franco
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# code providing by ;
#  - originally by user StreakyCobra in https://news.ycombinator.com/item?id=11070797
#  - in your wonderful tutorial, Nicola Paolucci, in https://www.atlassian.com/git/tutorials/dotfiles
backto=$(pwd)
# make executables in src/ visible to PATH

git_config() {
    git --git-dir="$install_dir" --work-tree="$HOME" "$@";
}
#install_check {{{
install_check() {
    printf "[INFO]%s \n" "${0##*/} - ${FUNCNAME[0]}"
    if [ -f "$HOME/bin/dotfiles_env" ]; then
        cd "$HOME/bin" || return
        # shellcheck source=dotfiles_env
        . dotfiles_env

    else
        DIR="$HOME/bin"
        mkdir "$DIR"
        cd "$DIR" || return
        PATH="$DIR/../src:$PATH"
        
        if curl -O --max-time 15  "https://raw.githubusercontent.com/brnfra/dotfiles/main/bin/dotfiles_env"
        then
            # shellcheck source=dotfiles_env
            source dotfiles_env
        else
            printf "[ERROR] dotfiles_env doesn't exist and can't download from repository.\n"
            exit 1
        fi
    fi
    if [ -d "$install_dir" ]; then
        cError "Already instaled. If you trying reinstall, remove"
        clnItalic "$install_dir" "in order and check outputs log."
        exit 0
    fi
    printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}" 
}
##}}}
## backup {{{
backup_cfg_files() {
    printf "\n[INFO]%s [START %s]\n" "${0##*/} - ${FUNCNAME[0]}" "$DIR_DATE"  >> "$bkpLog"
    cInfo "Backuping: " "${0##*/} - ${FUNCNAME[0]}"

    mkdir -p "$HOME/.config-bkp/original"
    local BKPDIR="$HOME/.config-bkp/original"
    local newDir
    newDir="${BKPDIR}"

    for dir in $Dirs; do
	printf "[INFO] Folder to backup: (%s)\n" "$dir" &>> "$bkpLog"
	mkdir -p "${newDir}/$dir"
    done

    for file in $files; do
	printf "[INFO] Files to backup: (%s)\n" "$file" &>> "$bkpLog"
	cp "${HOME}/$file" "${newDir}/$file" | sed '/^$/d;/./!d' &>> "$bkpLog"
    done
    echo >>"$bkpLog"

    printf "\n[INFO]%s [STOP %s]\n\n" "${0##*/} - ${FUNCNAME[0]}" "$DIR_DATE"  >> "$bkpLog"
    cInfo "Done!" "${0##*/} - ${FUNCNAME[0]}"
}
##}}}
##bare_repo_checkout {{{
bare_repo_checkout() {
    cInfo "Git checkout" "$branch"
    printf "[INFO] %s [START]\n" "${0##*/} - ${FUNCNAME[0]}"

    backup_cfg_files
    
    git_config stash save "Save config state[Install]" 
    ##use to undo, to recover last saved#
    ##>>  $ bare stash apply
    cInfo "To revert this, use: " "bare stash apply"

    if git_config checkout; then
        cmOk "Checkout branch"
	cInfo "Set to don´t show untracked files"
	git_config config status.showUntrackedFiles no
        bash ~/bin/enviroment_config 
        bash ~/bin/config_check 
        printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}"  
        cInfo "Logs can be check in: " "$bkpLog"

        cd "$backto" || return
        exit 0
    else
        printf "[WARN]git_config checkout FAIL :%s \n" "${0##*/} - ${FUNCNAME[0]}" 
        printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}"  
        DIR="$HOME/bin"
        cd "$DIR" || return
        PATH="$DIR/../src:$PATH"
        cError "Checkout branch:" "$branch" "and backup files."
        git_config checkout 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {} mv "$HOME"/{} "$HOME"/{}.backup 
        cmOk "Backup files"
        cInfo "Checking branch: " "$branch"
        if git_config checkout  ;then
            cmOk "Checkout branch"
            clnInfo "Installing enviroment_config and backup config files"
            source bkp_cfg_files
	    cInfo "Set to don´t show untracked files"
            git_config config status.showUntrackedFiles no
            bash enviroment_config 
            bash bkp_cfg_files bkp_cfg_files
            cmOk "Installation script"
            bash config_check tests
            printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}"  
            cInfo "Logs can be check in: " "$bkpLog"
            cd "$backto" || return
            exit 0
        else
            printf "[ERROR]git_config checkout fail again: %s [DONE]. Exit with errors.\n" "${0##*/} - ${FUNCNAME[0]}" 
            cError "Checkout branch" "$branch" "Exit with error."
            cInfo "Logs can be check in: " "$bkpLog"

            exit 1
        fi
    fi
}
##}}}
cd "$HOME" || return
printf "[INFO] ##### %s - [START] #####\n" "${0##*/}"  
install_check
cInfo "Git clone (--bare):" "$branch"
if git clone -v --single-branch -b "$branch" --depth 1 --bare "$repository" "$install_dir"; then
    cmOk "Git clone"
    cd "$HOME/bin" || return
    bare_repo_checkout
    printf "[INFO] ##### %s - [DONE] #####\n" "${0##*/}"  
else
    cError "Can't clone repository"
    printf "[ERROR] Can't clone repository.  ##### %s - [DONE] #####\n" "${0##*/}" 
    exit 1
fi
cd "$backto" || return
