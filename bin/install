#!/usr/bin/env bash

# Arquivo: install
# Autor: Bruno Franco
# Ultima_modificacao: 26-02-2023
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# code providing by ;
#  - originally by user StreakyCobra in https://news.ycombinator.com/item?id=11070797
#  - in your wonderful tutorial, Nicola Paolucci, in https://www.atlassian.com/git/tutorials/dotfiles

local=$(pwd)
cd "$HOME" || return
#Change for your Data
repository="https://github.com/brnfra/dotfiles.git"
bkpdir="$HOME"/.config-bkp
config_dir="$HOME"/.dotfiles
branch="main"
email="devlabbr@gmail.com"
full_name="brnfra"

function config {
    git --git-dir="$HOME"/.dotfiles/ --work-tree="$HOME" "$@";
}

function cleanbkp {

    folders="$HOME "
    folders+="$HOME/.bash "
    folders+="$HOME/.config/nvim "
    folders+="$HOME/.config/vifm "
    folders+="$HOME/.config/vifm/scripts "
    folders+="$HOME/.config/vifm/colors "
    folders+="$HOME/.config/xfce4/terminal "
    folders+="$HOME/.i3 "
    folders+="$HOME/.i3/autostart  "
    folders+="$HOME/.i3/i3blocks "
    folders+="$HOME/.config/rofi "
    folders+="$HOME/.config/rofi/themes "
    folders+="$HOME/.config/ranger "
    folders+="$HOME/.config/ranger/rc.conf "
    folders+="$HOME/.config/ranger/scope.sh "
    folders+="$HOME/.config/ranger/devicons.py "
    folders+="$HOME/.config "
    folders+="$HOME/.config/compton "
    folders+="$HOME/bin "
    folders+="$HOME/tests/ "
    folders+="$HOME/tests/bin/ "

    printf "[INFO] Moving files .backup to %s\n" "$bkpdir"
    for folder in $folders; do
	find $folder -maxdepth 1 -name "*.backup" -type f | xargs -I {} mv {} "$bkpdir"
    done
    printf "\r[INFO] Moving files .backup to %s: Done\n" "$bkpdir"
}

function make_env {

    if [ -d "$bkpdir" ]
    then
	printf "[INFO] %s already exists.\n" "$bkpdir" 
    else
	printf "\r[ERROR]Can't clean .backup files. No %s found\n" "$bkpdir"
	mkdir -p "$bkpdir"
	printf "[INFO] %s created.\n" "$bkpdir" 
    fi

    printf "[INFO] Install main(--bare). All done. \n"

    printf "[INFO] Installing Enviroment.   \n"
    "$HOME/bin/install_enviroment" "$email" "$full_name"
    printf "\r[INFO] Install Enviroment. All done. \n"

    printf "[INFO] Installing Fonts.\n"
    "$HOME/bin/install_fonts"
    printf "\r[INFO] Install Fonts. All done. \n"

    printf "[INFO] Installing I3config.\n"
    "$HOME/bin/i3_config_install" "$bkpdir"
    printf "\r[INFO] Install I3config. All done. \n"

}


if [ -d "$config_dir" ]; then

    printf "[ERROR] Already instaled. If you trying reinstall remove %s in order and check outputs log.\n" "$config_dir"
    exit 1

else

    printf "[INFO] Git clone %s(--bare)." "$branch"
    git clone --branch $branch --bare $repository "$HOME/.dotfiles";
    printf "\r[INFO] Git clone %s(--bare): Done\n" "$branch"

    printf "[INFO] Checkout branch %s." "$branch"

    if config checkout
    then
	printf "\r[INFO] Checkout branch %s: Done\n" "$branch"
	make_env 
	cd "$local" || return
	exit 0

    else
	printf "[ERROR] Checkout branch: backup files [file_name.backup] " 
	config checkout 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {}  mv {} {}.backup
	printf "\r[ERROR] Checkout branch: backup Done.                      \n"
	printf "[INFO] Checkout branch: Trying again after backup\n"
	cleanbkp

	if config checkout
	then
	    printf "[INFO] Checkout branch: Done.\n"
	    config config status.showUntrackedFiles no
	    printf "\r[INFO] Install main(--bare). All done. Exit\n"
	    make_env
	    cd "$local" || return
	    exit 0
	else
	    printf "\r[ERROR] Checkout branch: Exit with error.                      \n"
	    cd "$local" || return
	    exit 1
	fi
    fi
fi


