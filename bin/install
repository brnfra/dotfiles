#!/usr/bin/env bash
# Arquivo: install
# Autor: Bruno Franco
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# code providing by ;
#  - originally by user StreakyCobra in https://news.ycombinator.com/item?id=11070797
#  - in your wonderful tutorial, Nicola Paolucci, in https://www.atlassian.com/git/tutorials/dotfiles
backto=$(pwd)
# make executables in src/ visible to PATH

git_config() {
    git --git-dir="$install_dir" --work-tree="$HOME" "$@";
}
#install_check {{{
install_check() {
    printf "[INFO]%s \n" "${0##*/} - ${FUNCNAME[0]}"
    if [ -f "$HOME/bin/dotfiles_env" ]; then
        cd "$HOME/bin" || return
        # shellcheck source=dotfiles_env
        . dotfiles_env

    else
        DIR="$HOME/bin"
        mkdir "$DIR"
        cd "$DIR" || return
        PATH="$DIR/../src:$PATH"
        
        if curl -O --max-time 15  "https://raw.githubusercontent.com/brnfra/dotfiles/main/bin/dotfiles_env"
        then
            # shellcheck source=dotfiles_env
            source dotfiles_env
        else
            printf "[ERROR] dotfiles_env doesn't exist and can't download from repository.\n"
            exit 1
        fi
    fi
    if [ -d "$install_dir" ]; then
        cError "Already instaled. If you trying reinstall, remove"
        clnItalic "$install_dir" "in order and check outputs log."
        exit 0
    fi
    printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}" 
}
##}}}
## backup {{{
backup_cfg_files() {
    printf "\n[INFO]%s [START %s]\n" "${0##*/} - ${FUNCNAME[0]}" "$DIR_DATE"  >> "$bkpLog"
    cInfo "Backuping: " "${0##*/} - ${FUNCNAME[0]}"

    mkdir -p "$HOME/.config-bkp/original"
    local BKPDIR="$HOME/.config-bkp/original"
    local newDir
    local files
    local Dirs
    newDir="${BKPDIR}"

    # bash
    files='.bashrc '
    Dirs='.bash/ '
    files+=' .bash/aliases'
    files+=' .bash/exports'
    files+=' .bash/extras'
    files+=' .bash/functions'
    files+=' .bash/input'
    files+=' .bash/logout'
    files+=' .bash/profile'
    files+=' .bash/prompt'

    files+=' README.md '
    # zsh
    Dirs+=' .zsh/ '
    files+=' .zshrc '
    files+=' .zsh/aliases '
    files+=' .zsh/exports '
    files+=' .zsh/extras '
    files+=' .zsh/functions '
    files+=' .zsh/input '
    files+=' .zsh/logout '
    files+=' .zsh/profile '
    files+=' .zsh/prompt '
    files+=' .zsh/env '
    files+=' .zsh/zshrc '

    #conky
    Dirs+=' .config/conky/ ' 
    files+=' .config/conky/conky_calendar '
    files+=' .config/conky/conky_shortcuts '
    files+=' .config/conky/conky_dashboard '
    files+=' .config/conky/start_conky_maia '

    # vim
    Dirs+=' .config/nvim/backups/swaps '
    Dirs+=' .config/nvim/backups/undo '
    Dirs+=' .config/nvim/backups/view '
    files+=' .config/nvim/coc-settings.json '
    files+=' .config/nvim/init.vim '

    Dirs+=' .vim/backups/swaps '
    Dirs+=' .vim/backups/undo '
    Dirs+=' .vim/backups/view '
    Dirs+=' .vim/configs/ '
    files+=' .vimrc '
    files+=' .vim/configs/mappings.vim '
    files+=' .vim/configs/settings.vim '
    files+=' .vim/configs/plugins.vim '

    # vifm
    Dirs+=' .config/vifm/ '
    files+=' .config/vifm/vifmrc  '
    Dirs+=' .config/vifm/scripts/ '
    files+=' .config/vifm/scripts/vifmimg '
    files+=' .config/vifm/scripts/vifmpdf '
    Dirs+=' .config/vifm/colors/ '
    files+=' .config/vifm/colors/Default.vifm '
    files+=' .config/vifm/colors/near-default.vifm '
    
    # terminalrc=
    Dirs+=' .config/xfce4/terminal/ '
    Dirs+=' .local/share/konsole/ '
    files+=' .config/xfce4/terminal/terminalrc '
    files+=' .config/konsolerc '
    
    # i3
    Dirs+=' .i3/ '
    Dirs+=' .i3/autostart/ '
    files+=' .i3/autostart/i3config '
    files+=' .i3/autostart/wallpapers '
    Dirs+=' .i3/i3blocks/ '
    files+=' .i3/i3blocks/bandwidth'
    files+=' .i3/i3blocks/battery'
    files+=' .i3/i3blocks/calendar'
    files+=' .i3/i3blocks/cpu_usage'
    files+=' .i3/i3blocks/disk'
    files+=' .i3/i3blocks/iface'
    files+=' .i3/i3blocks/keyindicator'
    files+=' .i3/i3blocks/keymap'
    files+=' .i3/i3blocks/memory'
    files+=' .i3/i3blocks/mic'
    files+=' .i3/i3blocks/pomodoro'
    files+=' .i3/i3blocks/temperatures'
    files+=' .i3/i3blocks/trash'
    files+=' .i3/i3blocks/upgindicator'
    files+=' .i3/i3blocks/vars'
    files+=' .i3/i3blocks/volume'

    files+=' .i3/config '
    files+=' .i3/i3-get-window-criteria '
    files+=' .i3/i3-manjaro-default-config-backup '
    files+=' .i3/i3blocks.conf '
    files+=' .i3/i3blocks_v.conf '
    # rofi
    Dirs+=' .config/rofi/ '
    files+=' .config/rofi/config.rasi '
    Dirs+=' .config/rofi/themes/ '
    files+=' .config/rofi/themes/arc-dark-bottom.rasi '
    files+=' .config/rofi/themes/arc-dark-center-rounded.rasi '
    files+=' .config/rofi/themes/arc-dark-center.rasi '
    files+=' .config/rofi/themes/arc-dark-fullscreen.rasi '
    files+=' .config/rofi/themes/arc-dark-left.rasi '
    files+=' .config/rofi/themes/arc-dark-right.rasi '
    files+=' .config/rofi/themes/arc-dark-top.rasi '
    files+=' .config/rofi/themes/dark-center-rounded.rasi '
    files+=' .config/rofi/themes/dark-center.rasi '
    files+=' .config/rofi/themes/dmenu-top.rasi '

    # gsimplecal
    Dirs+=' .config/gsimplecal/ '
    files+=' .config/gsimplecal/config '
    # systemrc
    files+=' .wgetrc '
    files+=' .curlrc '
    # git
    files+=' .gitconfig '
    files+=' .git-completion.bash '
    # compton
    Dirs+=' .config/compton/ '
    files+=' .config/compton/compton.conf '
    # tmux
    files+=' .tmux.conf '
    # scripts
    Dirs+=' bin/ '
    files+=' /bin/audio_to_opus'
    files+=' /bin/bare_merge'
    files+=' /bin/bare_repo_pull'
    files+=' /bin/bkp_cfg_files'
    files+=' /bin/compress_img'
    files+=' /bin/config_check'
    files+=' /bin/connection'
    files+=' /bin/date_fold'
    files+=' /bin/dirs_config'
    files+=' /bin/dotfiles_env'
    files+=' /bin/enviroment_config'
    files+=' /bin/extract'
    files+=' /bin/free_buffer'
    files+=' /bin/get_fonts'
    files+=' /bin/get_packs_enviroment'
    files+=' /bin/get_packs_virtmanager'
    files+=' /bin/git_config'
    files+=' /bin/i3-scrot'
    files+=' /bin/i3_config'
    files+=' /bin/install'
    files+=' /bin/item_size'
    files+=' /bin/java_spring_react'
    files+=' /bin/local_repo_pull'
    files+=' /bin/namestd'
    files+=' /bin/pdfstd'
    files+=' /bin/pull_config'
    files+=' /bin/push_config'
    files+=' /bin/rm_linedup'
    files+=' /bin/search'
    files+=' /bin/ssh_config'
    files+=' /bin/stage_config'
    files+=' /bin/targz'
    files+=' /bin/type_fold'
    files+=' /bin/uninstall_bare_cfg'
    files+=' /bin/videos_merge'
    files+=' /bin/videostd'
    # test
    Dirs+=' test/ '
    files+=' /test/binMakeFolderByDateTest.bats'
    files+=' /test/binMakeFolderByTypeTest.bats'
    files+=' /test/binNamestdScriptTest.bats'
    files+=' /test/dotfilesTest.sh'
    files+=' /test/testBareI3Config.bats'
    files+=' /test/testGitConfig.bats'
    files+=' /test/testHomeConfigFiles.bats'
    files+=' /test/testInstall.bats'
    files+=' /test/testPkgInstalled.bats'
    files+=' /test/testRepoConfigFiles.bats'
    files+=' /test/testRepoI3Config.bats'

    for dir in $Dirs; do
	printf "[INFO] Folder to backup: (%s)\n" "$file" &>> "$bkpLog"
	mkdir -p "${newDir}/$dir"
    done

    for file in $files; do
	printf "[INFO] Files to backup: (%s)\n" "$file" &>> "$bkpLog"
	cp "${HOME}/$file" "${newDir}/$file" | sed '/^$/d;/./!d' &>> "$bkpLog"
    done
    echo >>"$bkpLog"

    cInfo "Done!" "${0##*/} - ${FUNCNAME[0]}"
    printf "\n[INFO]%s [STOP %s]\n\n" "${0##*/} - ${FUNCNAME[0]}" "$DIR_DATE"  >> "$bkpLog"
}
##}}}
##bare_repo_checkout {{{
bare_repo_checkout() {
    cInfo "Git checkout" "$branch"
    printf "[INFO] %s [START]\n" "${0##*/} - ${FUNCNAME[0]}"

    backup_cfg_files
    
    git_config stash save "Save config state[Install]" 
    ##use to undo, to recover last saved#
    ##>>  $ bare stash apply
    cInfo "To revert this, use: " "bare stash apply"

    if git_config checkout; then
        cmOk "Checkout branch"
	cInfo "Set to don´t show untracked files"
	git_config config status.showUntrackedFiles no
        bash ~/bin/enviroment_config 
        bash ~/bin/config_check 
        printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}"  
        cInfo "Logs can be check in: " "$bkpLog"

        cd "$backto" || return
        exit 0
    else
        printf "[WARN]git_config checkout FAIL :%s \n" "${0##*/} - ${FUNCNAME[0]}" 
        printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}"  
        DIR="$HOME/bin"
        cd "$DIR" || return
        PATH="$DIR/../src:$PATH"
        cError "Checkout branch:" "$branch" "and backup files."
        git_config checkout 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {} mv "$HOME"/{} "$HOME"/{}.backup 
        cmOk "Backup files"
        cInfo "Checking branch: " "$branch"
        if git_config checkout  ;then
            cmOk "Checkout branch"
            clnInfo "Installing enviroment_config and backup config files"
            source bkp_cfg_files
	    cInfo "Set to don´t show untracked files"
            git_config config status.showUntrackedFiles no
            bash enviroment_config 
            bash bkp_cfg_files bkp_cfg_files
            cmOk "Installation script"
            bash config_check tests
            printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}"  
            cInfo "Logs can be check in: " "$bkpLog"
            cd "$backto" || return
            exit 0
        else
            printf "[ERROR]git_config checkout fail again: %s [DONE]. Exit with errors.\n" "${0##*/} - ${FUNCNAME[0]}" 
            cError "Checkout branch" "$branch" "Exit with error."
            cInfo "Logs can be check in: " "$bkpLog"

            exit 1
        fi
    fi
}
##}}}
cd "$HOME" || return
printf "[INFO] ##### %s - [START] #####\n" "${0##*/}"  
install_check
cInfo "Git clone (--bare):" "$branch"
if git clone -v --single-branch -b "$branch" --depth 1 --bare "$repository" "$install_dir"; then
    cmOk "Git clone"
    cd "$HOME/bin" || return
    bare_repo_checkout
    printf "[INFO] ##### %s - [DONE] #####\n" "${0##*/}"  
else
    cError "Can't clone repository"
    printf "[ERROR] Can't clone repository.  ##### %s - [DONE] #####\n" "${0##*/}" 
    exit 1
fi
cd "$backto" || return
