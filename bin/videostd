#!/usr/bin/env bash
# Arquivo: videostd
# Autor: Bruno Franco
# Ultima_modificacao: 18-01-2024
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
#to compact mp4 video files
# shellcheck source=dotfiles_env
. dotfiles_env

printf "Compact videos file.\n"

if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP
${0##*/}

NAME
    ${0##*/}  - Compact videos file.

SYNOPSIS
    ${0##*/} {-aAh| --help | filename }

DESCRIPTION
    To compact videos file and reduce size without great quality loss. 

    To Normalize a specific video
	${0##*/} file_name.mp4
	output: ./output/file_name.mp4
    To Normalize all videos in current folder
	${0##*/} -a
	Will create a folder compressed and and set output there.
	output: ./output/file_name.mp4

OPTIONS
    -a,A
	To Normalize all videos files in current folder
    -h,--help
	Print help informations

See the README for documentation.
https://github.com/brnfra/dotfiles
Licensed under the MIT license.
HELP
exit; fi

backup="Backup_"
backup+=$(pwd | awk -F / '{print $NF}')
output="Output"
osys=$(cat /etc/os-release | sed -n -r '/^ID=/p' | cut -d "=" -f 2)
if [ "$osys" = "debian" ] || [ "$osys" = "ubuntu" ]; then
    video_list=$(find . -maxdepth 1 -type f -print0 \
	| xargs -0 file --mime-type \
	| awk /"video\/"/'{print}' \
	| cut -d ':' -f 1 )

else
    video_list=$(find . -maxdepth 1 -type f -print0 \
	| xargs -0 file --media-type \
	| awk /"video\/"/'{print}' \
	| cut -d ':' -f 1 )

fi
num_vid=${#video_list}
LOCAL=$(pwd)
if [ "$LOCAL" = "$HOME" ]; then
    printf "Script avoid execute in [%s] directory.\n" "$HOME"
    exit 1
fi
if (( num_vid == 0  )) 
then
    clnError "${LINENO}:There isn't video file."
    exit 1
else
    mkdir -p "$output";
    mkdir -p "$backup";
fi

clnInfo "Compacting mp4's(codec libx265) files"
if command -v ffmpeg &> /dev/null
then
    if [[ "$1" == "-a" ]] || [[ "$1" == "-A" ]]; then 	    # All option {{{
	for file in $video_list  
	do
	    cInfo
	    clnItalic "$file" "in progress:"
	    #take the size
	    du -b "$file" > oldsize
	    OLDSIZE=$(echo oldsize | sed -e 's/[^0-9]//gi')
	    if ffmpeg -i "$file" -c:v libx265 -crf 32 ./"$output"/"$file"
	    then
		wait $!
	    else
		continue
	    fi
	    cInfo 
	    clnItalic "$output/$file" "created."

	    du -b "./$output/$file" > newsize
	    NEWSIZE=$(echo newsize | sed -e 's/[^0-9]//gi')
	    if [[ $NEWSIZE -gt $OLDSIZE ]]
	    then
		if rm ./"$output"/"$file";
		then
		    wait $!
		    cInfo
		    clnItalic "./$output/$file" "deleted. Greater then old file."
		else
		    cError "${LINENO}:When discart the file ./"$output"/"$1""
		    clnItalic "$file" 
		    break
		fi
	    else
		if mv "$file" ./"$backup";
		then
		    wait $!
		    cInfo
		    cItalic "$file" "copied to"
		    clnItalic "$backup/" "folder"
		    mv ./"$output"/"$file" ./"$file"
		    clnInfo "New file override old file."
		else
		    cError "${LINENO}:Error when copy file."$1" to ./"$backup"" 
		    clnItalic "$file" 
		    break
		fi
	    fi
	    echo
	done  #    }}}
    else  # Single file option {{{
	    cInfo
	    clnItalic "$1" "in progress:"
	    #take the size
	    du -b "$1" > oldsize
	    OLDSIZE=$(echo oldsize | sed -e 's/[^0-9]//gi')
	    if ffmpeg -i "$1" -c:v libx265 -crf 32 ./"$output"/"$1"
	    then
		wait $!
	    else
		clnError "{$LINENO}:ffmpeg error"	
	    fi
	    cInfo 
	    clnItalic "$output/$1" "created."

	    du -b "./$output/$1" > newsize
	    NEWSIZE=$(echo newsize | sed -e 's/[^0-9]//gi')
	    if [[ $NEWSIZE -gt $OLDSIZE ]]
	    then
		if rm ./"$output"/"$1";
		then
		    wait $!
		    cInfo
		    clnItalic "./$output/$1" "deleted. Greater then old file."
		else
		    cError "${LINENO}:When discart the file ./"$output"/"$1""
		    clnItalic "$1" 
		    
		fi
	    else
		if mv "$1" ./"$backup";
		then
		    wait $!
		    cInfo
		    cItalic "$1" "copied to"
		    clnItalic "$backup/" "folder"
		    mv ./"$output"/"$1" ./"$1"
		    clnInfo "New file override old file."
		else
		    cError "${LINENO}:Error when copy file."$1" to ./"$backup"" 
		    clnItalic "$1" 
		    
		fi
	    fi
    
    fi  # }}}
fi 
#Clean
rm -f newsize
rm -f oldsize
find . -type d -empty -delete
clnInfo "Finish."

