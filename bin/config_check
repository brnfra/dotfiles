#!/usr/bin/env bash
# Arquivo: config_check
# Autor: Bruno Franco
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# shellcheck source=dotfiles_env
for file in ~/bin/{ssh_config,dotfiles_env,git_config}; do                                              
    [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;


tests() {
    printf "[INFO]%s [TEST START]\n" "${0##*/} - ${FUNCNAME[0]}"  >> "$bkpLog" 
    backto=$(pwd)
    cd "$HOME/test" || return

    if [[ "$1" == "-a" || "$1" == "--all" || "$1" == "-A" ]]; then 
        cInfo "Config check all" &>> "$bkpLog"
        if bash "$checkAll" | awk '/not ok|failed|line/{print $0}' &>> "$bkpLog";
        then
            if [ -f "$i3_cfg" ] && [ -f "$i3_scpt" ]; then
                cmOk "I3config and i3 scripts"
            else
                cError "I3config not found. Installing config file "
                if ! "$i3_scpt" "$bkpdir"; then
                    cError "I3config "
                    cItalic "$i3_cfg" " isn't installed "
                    clnItalic "$i3_scpt" "exec fail or not found."
                fi
                cInfo "I3config file installed."
            fi
        else
            bash "$checkAll" | awk '/test|OK|FAILED/{print $0}'
            cError "Some tests fail"
            cmOk "Config files and folders checked"
        fi
    else
        cInfo "Config check" "/home" &>> "$bkpLog"
        if bats "$checkHome"| awk '/not ok|failed|line/{print $0}' &>> "$bkpLog";
        then
            if [ -f "$i3_cfg" ] && [ -f "$i3_scpt" ]; then
                cmOk "I3config and i3 scripts"
            else
                clnError "I3config not found. Installing config file "
                if ! "$i3_scpt" "$bkpdir"; then
                    cError "I3config "
                    cItalic "$i3_cfg" " isn't installed "
                    clnItalic "$i3_scpt" "exec fail or not found."
                fi
                cInfo "I3config file installed."
            fi
        else
            bats "$checkHome" | awk '/not ok|failed|line/{print $0}'
            cError "Some tests fail"
            cmOk "Config files and folders checked"
        fi
    fi
    cd "$backto" || return
    printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}"  >> "$bkpLog"
}

packs() {
    printf "[INFO]%s [TEST START]\n" "${0##*/} - ${FUNCNAME[0]}"  >> "$bkpLog" 
    osys=$(cat /etc/os-release | sed -n -r '/^ID=/p' | cut -d "=" -f 2)

    #debian ubuntu manjaro etc

    packs_list+=" acpi " 
    packs_list+=" blueman "      
    packs_list+=" bzip2 "
    packs_list+=" curl "         
    if [ "$osys" = "manjaro" ]; then
        packs_list+=" fd "      
        packs_list+=" picom " 
        packs_list+=" xautolock " 
        packs_list+=" i3-wm "           
    else
        packs_list+=" fd-find "      
        packs_list+=" exa "
        packs_list+=" compton" 
        packs_list+=" i3 "           
        packs_list+=" i3lock-fancy " 
        packs_list+=" x11-utils "    
        packs_list+=" network-manager-gnome "
        packs_list+=" rar "
        packs_list+=" netcat-openbsd "
        packs_list+=" openssh-client "          
    fi
    packs_list+=" ffmpeg "       
    packs_list+=" fzf "          
    packs_list+=" ghostscript "  
    packs_list+=" git "          
    packs_list+=" gsimplecal" 
    packs_list+=" gzip "
    packs_list+=" i3blocks "     
    packs_list+=" imagemagick "  
    packs_list+=" jq "           
    packs_list+=" neovim "       
    packs_list+=" nitrogen "     
    packs_list+=" openssl "      
    packs_list+=" pcmanfm " 
    packs_list+=" ranger "
    packs_list+=" rofi "
    packs_list+=" rsync "        
    packs_list+=" scrot "        
    packs_list+=" shunit2 "      
    packs_list+=" sysstat "      
    packs_list+=" tar "
    packs_list+=" unzip "        
    packs_list+=" vifm "         
    packs_list+=" vim  "         
    packs_list+=" xfce4-power-manager " 
    packs_list+=" xfce4-terminal " 
    packs_list+=" zip "

    if [ "$osys" = "debian" ]; then
        packs_list+=" alsautils "
    fi
    if [ "$osys" = "ubuntu" ]; then
        packs_list+=" pulseaudio "
    fi

    cInfo "Checking installed packs for" "bare repo" "dotfiles"
    for pack in $packs_list; do
        if [ "$osys" = "ubuntu" ]; then
            if  dpkg -s "$pack" &> /dev/null; then
                cmOk "$pack" >> "$bkpLog"

            else
                cError " " "$pack" >> "$bkpLog" 

            fi
        elif [ "$osys" = "debian" ]; then
            if dpkg -s "$pack" &> /dev/null; then
                cmOk "$pack" >> "$bkpLog"

            else
                cError " " "$pack" >> "$bkpLog"

            fi
        elif [ "$osys" = "manjaro" ]; then
            if pacman -Qi "$pack" &> /dev/null; then
                cmOk "$pack" >> "$bkpLog"
            else
                cError " " "$pack" >> "$bkpLog"
            fi
        fi
    done

    printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}"  >> "$bkpLog"
}

connect() {
    printf "[INFO]%s [TEST START]\n" "${0##*/} - ${FUNCNAME[0]}"  >> "$bkpLog" 
    if connection &>> "$bkpLog" && ssh_connect &>> "$bkpLog"; then
        cmOk "Connection and ssh_connect check:"
    elif ! connection &> /dev/null; then
        cError "Connection"
        exit 2
    elif ! ssh_connect &> /dev/null; then
        cError "ssh-agent"
        exit 3
    else
        cError "Check your connection and your ssh-agent." &>> "$bkpLog"
        exit 4
    fi
    printf "[INFO]%s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}"  >> "$bkpLog"
}

case $1 in
    tests) "$@"; exit;;
    packs) "$@"; exit;;
    connect) "$@"; exit;;
esac
