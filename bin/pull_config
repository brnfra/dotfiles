#!/usr/bin/env bash
# Arquivo: pull_config
# Autor: Bruno Franco
# Ultima_modificacao: 09-03-2023
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# shellcheck source=~/bin/dotfiles_env
. dotfiles_env
nowIn=$(pwd)

# bkpdir test {{{ 

if [ -d "$bkpdir" ] 
then
    cInfo
    clnItalic "$bkpdir" "already exists. "
else
    mkdir -p "$bkpdir"
    cInfo "Folder"
    clnItalic "$bkpdir" "created"
fi

cd "$HOME" || return
#}}}
# Clean *.backup {{{ 
function cleanbkp {
    folders="$HOME "
    folders+="$HOME/.bash "
    folders+="$HOME/.config/nvim "
    folders+="$HOME/.config/vifm "
    folders+="$HOME/.config/vifm/scripts "
    folders+="$HOME/.config/vifm/colors "
    folders+="$HOME/.config/xfce4/terminal "
    folders+="$HOME/.i3 "
    folders+="$HOME/.i3/autostart  "
    folders+="$HOME/.i3/i3blocks "
    folders+="$HOME/.config/rofi "
    folders+="$HOME/.config/rofi/themes "
    folders+="$HOME/.config/ranger "
    folders+="$HOME/.config/ranger/rc.conf "
    folders+="$HOME/.config/ranger/scope.sh "
    folders+="$HOME/.config/ranger/devicons.py "
    folders+="$HOME/.config "
    folders+="$HOME/.config/compton "
    folders+="$HOME/bin "
    folders+="$HOME/tests/ "

    cInfo "Moving files .backup to "
    cItalic "$bkpdir"
    printf "\n"
    for folder in $folders; do
	find "$folder" -maxdepth 1 -name "*.backup" -type f | xargs -I {} mv {} "$bkpdir"
    done
}
# }}}
# general test {{{ 
function cfgTests {
    if "$checkHome" > /dev/null;
    then
    	"$checkHome" | awk '/FAIL/''{print}'
	if [ -f "$i3_cfg" ] && [ -f "$i3_scpt" ]; then
	    cmOk "I3config and i3 script"
	    
	else
	    cError "I3config not found. Installing config file: "
	    if ! "$i3_scpt" "$bkpdir"; then
		cError "I3config " 
		cItalic "$i3_cfg" " isn't installed " 
		clnItalic "$i3_scpt" "exec fail or not found."
		 
	    fi
	    clnInfo "I3config file installed."
	    
	fi
    else
	cmOk "Config files and folders checked"
    fi
}
#}}}
function config {
    git --git-dir="$install_dir" --work-tree="$HOME" "$@" ; 
}

cd "$HOME" || return
cInfo "1:Git pull"
cItalic "$branch" "(--bare):"
if config pull origin $branch 
then
    cfgTests

    cInfo "1:Git pull"
    cItalic "$branch" "(--bare):"
    cOk
else
    cError "2: Config pull error: Conflict."
    printf "\n"
    config pull origin $branch 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {} mv "$HOME"/{} "$HOME"/{}.backup
    cmOk "2: Checking again and backup files"

    cleanbkp
    cmOk "2: Cleaning"

    if config pull origin $branch
    then
	cfgTests
	cInfo "3: Git pull config "
	cItalic "$branch" "(--bare):"
	cOk
    else
	clnError "3: Can't resolve conflicts. Trying to Fetch."

	config fetch origin $branch
	cInfo "4: Fetching origin:"
	cItalic "$branch" ":"
	cOk

	config reset --hard HEAD
	cInfo "4: Reset --hard:"
	cItalic "$branch" ":"
	cOk

	config merge origin '@{u}'
	cInfo "4: Mergin origin:"
	cItalic "$branch" ":"
	cOk

	config pull origin $branch 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {} mv "$HOME"/{} "$HOME"/{}.backup
	cmOk "Checking again and backup files"
	cfgTests

	cleanbkp
	cmOk "Clean"

	if config pull origin $branch
	    clnInfo "5: Git pull finished after fetch. Exit"
	then
	    clnError "5: Can't pull anyway .Exit with errors."
	fi
    fi
fi

cInfo "1:Git pull clone repository folder"
cItalic "$branch" "in"
clnItalic "$dotfiles_dir"
cd "$dotfiles_dir" || return
if git checkout $branch ;then
    git pull origin $branch
else
    cError "Clone dotfiles in" 
    clnItalic "$dotfiles_dir"
fi

cmOk "1:Git pull clone repository folder"
cd "$nowIn" || return



