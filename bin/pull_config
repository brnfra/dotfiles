#!/usr/bin/env bash
# Arquivo: pull_config
# Autor: Bruno Franco
# Ultima_modificacao: 03-03-2023
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.


local=$(pwd)
bkpdir="$HOME"/.config-bkp
dotfiles_dir="$HOME/Documents/Projects/git/dotfiles"
i3_cfg="$HOME/.i3/config"
i3_scpt="$HOME/bin/i3_config_install"
branch="main"
checkHome="$HOME/tests/checkHomeConfigFilesTest.sh"
#config_dir="$HOME/.dotfiles"
# Color {{{ 
function cInfo {
    local reset
    local bold
    local cyan
    reset=$(tput sgr0);
    bold=$(tput bold);
    cyan=$(tput setaf 39);
    printf "%s%s[INFO] %s %s" "$cyan" "$bold" "$reset" "$1" 
}
function cError {
    local reset
    local bold
    local red
    reset=$(tput sgr0);
    bold=$(tput bold);
    red=$(tput setaf 124);
    printf "%s%s[ERROR] %s %s" "$red" "$bold" "$reset" "$1" 
}
function cOk {
    local reset
    local bold
    local green
    reset=$(tput sgr0);
    bold=$(tput bold);
    green=$(tput setaf 34);
    printf "%s%s OK \n%s" "$green" "$bold" "$reset" 
}
function cItalic {
    local cyan
    local italic
    local reset
    cyan=$(tput setaf 39);
    italic=$(tput sitm);
    reset=$(tput sgr0);
    printf "%s%s %s %s %s" "$cyan" "$italic" "$1" "$reset" "$2"
}
# }}}
# bkpdir test {{{ 

if [ -d "$bkpdir" ] 
then
    cInfo
    cItalic "$bkpdir" "already exists. "
    printf "\n"
else
    mkdir -p "$bkpdir"
    cInfo "Folder"
    cItalic "$bkpdir" "created"
    printf "\n"
fi

cd "$HOME" || return
#}}}
# Clean *.backup {{{ 
function cleanbkp {
    folders="$HOME "
    folders+="$HOME/.bash "
    folders+="$HOME/.config/nvim "
    folders+="$HOME/.config/vifm "
    folders+="$HOME/.config/vifm/scripts "
    folders+="$HOME/.config/vifm/colors "
    folders+="$HOME/.config/xfce4/terminal "
    folders+="$HOME/.i3 "
    folders+="$HOME/.i3/autostart  "
    folders+="$HOME/.i3/i3blocks "
    folders+="$HOME/.config/rofi "
    folders+="$HOME/.config/rofi/themes "
    folders+="$HOME/.config/ranger "
    folders+="$HOME/.config/ranger/rc.conf "
    folders+="$HOME/.config/ranger/scope.sh "
    folders+="$HOME/.config/ranger/devicons.py "
    folders+="$HOME/.config "
    folders+="$HOME/.config/compton "
    folders+="$HOME/bin "
    folders+="$HOME/tests/ "

    cInfo "Moving files .backup to "
    cItalic "$bkpdir"
    printf "\n"
    for folder in $folders; do
	find "$folder" -maxdepth 1 -name "*.backup" -type f | xargs -I {} mv {} "$bkpdir"
    done
}
# }}}
# general test {{{ 
function cfgTests {
    local tests
    tests=$("$checkHome" | awk '/OK/ || /FAILED/''{print $1}')
    if [ "$tests" = "FAILED" ];then
	"$checkHome" | awk '/FAIL/''{print}'
	if [ -f "$i3_cfg" ] && [ -f "$i3_scpt" ]; then
	    cInfo "I3config:"
	    cOk
	else
	    cError "I3config not found. Installing config file: "
	    if ! "$i3_scpt" "$bkpdir"; then
		cError "I3config " 
		cItalic "$i3_cfg" " isn't installed " 
		cItalic "$i3_scpt" "exec fail or not found."
		printf "\n" 
	    fi
	    cInfo "I3config file installed."
	    printf "\n"
	fi
    else
	cInfo "Config files and folders checked:"
	cOk
    fi
}
#}}}
function config {
    git --git-dir="$HOME"/.dotfiles/ --work-tree="$HOME" "$@" ; 
}

cInfo "1:Git pull"
cItalic "$branch" "(--bare):"
if config pull origin $branch 
then
    cfgTests

    cInfo "1:Git pull"
    cItalic "$branch" "(--bare):"
    cOk

    exit 0
else
    cError "2: Config pull error: Conflict."
    printf "\n"
    config pull origin $branch 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {} mv "$HOME"/{} "$HOME"/{}.backup
    cInfo "2: Checking again and backup files:"
    cOk

    cleanbkp
    cInfo "2: Cleaning:"
    cOk

    if config pull origin $branch
    then
	cfgTests
	cInfo "3: Git pull config "
	cItalic "$branch" "(--bare) and exit:"
	cOk
	cd "$local" || return
	exit 1
    else
	cError 	"3: Can't resolve conflicts. Trying to Fetch."
	printf	"\n"

	config fetch origin $branch
	cInfo "4: Fetching origin:"
	cItalic "$branch" ":"
	cOk

	config reset --hard HEAD
	cInfo "4: Reset --hard:"
	cItalic "$branch" ":"
	cOk

	config merge origin '@{u}'
	cInfo "4: Mergin origin:"
	cItalic "$branch" ":"
	cOk

	config pull origin $branch 2>&1 | sed -r '/^\w/d;/\*/d' | awk '{print $1}' | xargs -I {} mv "$HOME"/{} "$HOME"/{}.backup
	cInfo "Checking again and backup files:"
	cOk
	cfgTests

	cleanbkp
	cInfo "Clean:"
	cOk

	if config pull origin $branch
	    cInfo "5: Git pull finished after fetch. Exit"
	    printf "\n"
	    cd "$local" || return
	    exit 2
	then
	    cError "5: Can't pull anyway .Exit with errors."
	    printf "\n"
	    cd "$local" || return
	    exit 2
	fi
    fi
fi

cInfo "1:Git pull clone repository folder"
cItalic "$branch" "in"
cItalic "$dotfiles_dir"
printf "\n"
cd "$dotfiles_dir" || return
if git checkout $branch ;then
    git pull origin $branch
else
    cError "Clone dotfiles in" 
    cItalic "$dotfiles_dir"
fi

cInfo "1:Git pull clone repository folder:"
cOk
