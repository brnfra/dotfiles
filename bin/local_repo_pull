#!/usr/bin/env bash
# Arquivo: local_repo_pull
# Autor: Bruno Franco
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
# shellcheck source=~/bin/dotfiles_env
for file in ~/bin/{dotfiles_env,git_config,config_check,stage_config}; do
    [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;
#fetch{{{
local_repo_fetch () {
    printf "[INFO]### %s beginning ### local_repo_pull ###\n" "${FUNCNAME[0]}" >> "$bkpLog"
    cInfo "Get config from remote(fetch) to:" "fetch and merge recursive(theirs) [--local-repo]"
    backto=$(pwd)
    cd "$dotfiles_dir" || return
    prepare

    if git_repo fetch --all &>> "$bkpLog"
    then
	git_repo merge -s recursive -X theirs origin/$branch &>> "$bkpLog"

	if tests -a;then
	    cmOk "Files check"
	else
	    cError "Files check"
	fi

	cInfo "Git pull, branch" "$branch" "(--local)"
	cmOk "Git pull"
    else
	cError "${LINENO}:Config fetch error(logs):" "$bkpLog" "; Backup conflicts and try again"
    fi
    cd "$backto" || return
    printf "[INFO]### %s all done ### local_repo_pull ###\n" "${FUNCNAME[0]}" >> "$bkpLog"
}
##}}}
#pull{{{
local_repo_pull() {
    printf "[INFO]### %s beginning ### local_repo_pull ###\n" "${FUNCNAME[0]}" >> "$bkpLog"
    clnInfo "local repo pull"
    backto=$(pwd)
    cInfo "Get config from remote(pull):" "repo pull [--local-repo]"
    cInfo "Git pull in repository folder. Branch:" "$branch" 
    cInfo "in" "$dotfiles_dir"
    cd "$dotfiles_dir" || return

    if [ -d "$dotfiles_dir" ]
    then
	if  git_repo pull -X theirs origin $branch &>> "$bkpLog" ;then
	    if tests -a;then
		cmOk "Files check"
	    else
		cError "Files check"
	    fi

	    cmOk "Git make pull in cloned repository folder"
	else
	    cError "Fail to checkout and pull from remote. Check:" "$bkpLog" " ; Or clone dotfiles in" "$dotfiles_dir."
	    cInfo "See log in:" "$bkpLog"
	    clnError "${LINENO}:Can't resolve conflicts. Trying to Fetch!"
	    local_repo_fetch
	fi

	cInfo "Git pull, branch" "$branch" "(--local)"
	cmOk "Git pull"
    else
	cError "No such directory to pull in"
	cInfo "Clone repository first. Branch:" "$branch" 
	cInfo "in" "$dotfiles_dir"
    fi
    cd "$backto" || return
    printf "[INFO]### %s all done ### local_repo_pull ###\n" "${FUNCNAME[0]}" >> "$bkpLog" 
}
#}}}

"$@"
