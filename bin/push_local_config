#!/usr/bin/env bash
#  Arquivo: push_local_config
#  Autor: Bruno Franco
#  Ultima_modificacao: 03-03-2023
#  Download: git@github.com:brnfra
#  Licence:Este arquivo é de domínio público
#  Garantia: O autor não se responsabiliza por eventuais danos
#            causados pelo uso deste arquivo.
local=$(pwd)
pushFrom="$HOME/Documents/Projects/git/dotfiles"
branch="main"
checkHome="$HOME/tests/dotfilesTest.sh"
cd "$HOME/tests" || return

# Color {{{ 
function cInfo {
    local reset
    local bold
    local cyan
    reset=$(tput sgr0);
    bold=$(tput bold);
    cyan=$(tput setaf 39);
    printf "%s%s[INFO] %s %s" "$cyan" "$bold" "$reset" "$1" 
}
function cError {
    local reset
    local bold
    local red
    reset=$(tput sgr0);
    bold=$(tput bold);
    red=$(tput setaf 124);
    printf "%s%s[ERROR] %s %s" "$red" "$bold" "$reset" "$1" 
}
function cOk {
    local reset
    local bold
    local green
    reset=$(tput sgr0);
    bold=$(tput bold);
    green=$(tput setaf 34);
    printf "%s%s OK \n%s" "$green" "$bold" "$reset" 
}
function cItalic {
    local cyan
    local italic
    local reset
    cyan=$(tput setaf 39);
    italic=$(tput sitm);
    reset=$(tput sgr0);
    printf "%s%s %s %s %s" "$cyan" "$italic" "$1" "$reset" "$2"
}
# }}}
# git push {{{  
function git_push () {
    message="${1:-"refactor: update dotfiles dir or scripts"}"
    git add -A -v;git commit -v -m "$message";git push origin $branch   
    if [ $? ];then
	git status -sb
	cInfo "Git add + and push:"
	cOk

    else
	git status -sb 
	cError"A error occours. Check log."
	printf "\n" 
    fi
}
# }}}

if "$checkHome" > /dev/null;
then
    cInfo "Files and folders check:" 
    cOk

    if [ -d "$pushFrom" ];then
	cd "$pushFrom" || return
	stage_local_config
	git_push "$1"
    else
	cError "No"
	cItalic "$pushFrom" "found." 
	printf "\n" 
	exit 1
    fi

    cd "$local" || return
    exit 0
else
    "$checkHome" | awk '/FAIL/''{print}'
    cd "$local" || return
    exit 1
fi

cd "$local" || return
