#!/usr/bin/env bash
# Arquivo: pdfstd
# Autor: Bruno Franco
# Ultima_modificacao: 15-03-2023
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
#To compact pdf files using ghostscript
# shellcheck source=~/bin/dotfiles_env
. dotfiles_env

backup="Backup_"
# get name from parent folder
backup+=$(pwd | awk -F / '{print $NF}')
output="Output"
LOCAL=$(pwd)
num_pdf=$(find . -maxdepth 1 -type f -name '*.pdf' | wc -l )
if [ "$LOCAL" = "$HOME" ]; then
    printf "Script avoid execute in [%s] directory.\n" "$HOME"
    exit 1
fi

if [ "$num_pdf" = "0" ]
then
    clnError "${LINENO}:There isn't .pdf files"
    exit 1
else
    find . -maxdepth 1 -type f -name '*.pdf' |  sed 's|\.\/||gi' > pdf_files_list
    pdf_files_list=$(cat pdf_files_list)
    mkdir -p "$output";
    mkdir -p "$backup";
fi

clnInfo "Compacting pdf's files"
for file in $pdf_files_list
do
    #take the size
    du -b "$file" > oldsize
    OLDSIZE=$(cat oldsize | sed -e 's/[^0-9]//gi')
    cInfo
    clnItalic "$file" "is the next:"
    gs \
	-sDEVICE=pdfwrite \
	`# font settings` \
	-dSubsetFonts=true \
	-dCompressFonts=true \
	-dEmbedAllFonts=true \
	`# color format` \
	-sProcessColorModel=DeviceRGB \
	-sColorConversionStrategy=sRGB \
	-sColorConversionStrategyForImages=sRGB \
	-dConvertCMYKImagesToRGB=true \
	`# image resample` \
	-dDetectDuplicateImages=true \
	-dDownsampleColorImages=true -dDownsampleGrayImages=true -dDownsampleMonoImages=true \
	-dColorImageResolution=140 -dGrayImageResolution=140 -dMonoImageResolution=140 \
	`# preset overrides` \
	-dDoThumbnails=false \
	-dCreateJobTicket=false \
	-dPreserveEPSInfo=false \
	-dPreserveOPIComments=false \
	-dPreserveOverprintSettings=false \
	-dUCRandBGInfo=/Remove \
	-dNOPAUSE -dQUIET -dBATCH \
	-sOutputFile=./"$output"/"$file" "$file"
    
    cInfo 
    clnItalic "$output/$file" "created."
    du -b "./$output/$file" > newsize
    NEWSIZE=$(cat newsize | sed -e 's/[^0-9]//gi')
    if [[ $NEWSIZE -gt $OLDSIZE ]]
    then
	if rm ./"$output"/"$file";
	then
	    cInfo
	    clnItalic "./$output/$file" "deleted"
	else
	    cError "${LINENO}:Discart file"
	    clnItalic "$file" 
	    break
	fi
    else
        if mv "$file" ./"$backup";
        then
	    cInfo
            cItalic "$file" "copied to"
	    clnItalic "$backup/" "folder"
	    mv ./"$output"/"$file" ./"$file"
	    clnInfo "New file substituted old file"
        else
            cError "${LINENO}:Error when copy file" 
	    clnItalic "$file" 
            break
        fi
    fi
    echo
done
#Clean
rm -f newsize
rm -f oldsize
rm -f pdf_files_list
find . -type d -empty -delete

clnInfo "Finish."
