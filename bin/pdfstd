#!/usr/bin/env bash
# Arquivo: pdfstd
# Autor: Bruno Franco
# Ultima_modificacao: 03-03-2023
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
#To compact pdf files using ghostscript
backup="Backup_"
backup+=$(pwd | awk -F / '{print $NF}')
output="Output"
LOCAL=$(pwd)
if [ "$LOCAL" = "$HOME" ]; then
    printf "Script avoid execute in [%s] directory.\n" "$HOME"
    printf "If you insist, comment line 12-16 in [%s] Script. You're on own risk.\n" "$0"
    exit 1
fi

if ls ./*.pdf;
then
    find . -maxdepth 1 -type f -name '*.pdf' |  sed 's|\.\/||gi' > pdf_files_list
    pdf_files_list=$(cat pdf_files_list)
else
    echo "Error. There isn't .pdf files"
    exit 1
fi
if mkdir -p ./$output;
then
    echo "Folder $output created"
    if mkdir -p ./$backup;
    then
	echo "Folder $backup created"
    else
        echo "Error. Folder $backup doesn't created"
	exit 3
    fi
else
    echo "Error. Folder $output doesn't created"
    exit 2
fi
echo -e "Compacting pdf's files..."
for file in $pdf_files_list
do
    #take the size
    du -b "$file" > oldsize
    OLDSIZE=$(cat oldsize | sed -e 's/[^0-9]//gi')
    echo -e "\n[ $file ]"
    gs \
	-sDEVICE=pdfwrite \
	`# font settings` \
	-dSubsetFonts=true \
	-dCompressFonts=true \
	-dEmbedAllFonts=true \
	`# color format` \
	-sProcessColorModel=DeviceRGB \
	-sColorConversionStrategy=sRGB \
	-sColorConversionStrategyForImages=sRGB \
	-dConvertCMYKImagesToRGB=true \
	`# image resample` \
	-dDetectDuplicateImages=true \
	-dDownsampleColorImages=true -dDownsampleGrayImages=true -dDownsampleMonoImages=true \
	-dColorImageResolution=140 -dGrayImageResolution=140 -dMonoImageResolution=140 \
	`# preset overrides` \
	-dDoThumbnails=false \
	-dCreateJobTicket=false \
	-dPreserveEPSInfo=false \
	-dPreserveOPIComments=false \
	-dPreserveOverprintSettings=false \
	-dUCRandBGInfo=/Remove \
	-dNOPAUSE -dQUIET -dBATCH \
	-sOutputFile=./"$output"/"$file" "$file"
    echo -e "Done\n"
    du -b "./$output/$file" > newsize
    NEWSIZE=$(cat newsize | sed -e 's/[^0-9]//gi')
    if [[ $NEWSIZE -gt $OLDSIZE ]]
    then
	if rm ./"$output"/"$file";
	then
	    echo "./$output/$file deleted."
	else
	    echo "Error. Discart file "$file" code error $?"
	    break
	fi
    else
        if mv "$file" ./"$backup";
        then
            echo "$file copied to $backup/ folder"
	    mv ./"$output"/"$file" ./"$file"
	    echo "New file substituted old file"
        else
            echo "Error when copy file "$file" code error $?"
            break
        fi
    fi
done
#Clean
rm -f newsize
rm -f oldsize
rm -f pdf_files_list
#Is empty? yes, remove. 
if [ -z "$(ls -A ./$output)" ]; then
    rm -rf ./"$output"; echo "./$output folder deleted" 
fi
if [ -z "$(ls -A ./"$backup")" ]; then
    rm -rf ./"$backup"; echo "./$backup folder deleted" 
fi
echo "All done. Success"
