#!/usr/bin/env bash
# Color {{{ 
function cInfo {
    local reset
    local bold
    local cyan
    reset=$(tput sgr0);
    bold=$(tput bold);
    cyan=$(tput setaf 39);
    printf "%s%s[INFO] %s %s" "$cyan" "$bold" "$reset" "$1" 
}
function cError {
    local reset
    local bold
    local red
    reset=$(tput sgr0);
    bold=$(tput bold);
    red=$(tput setaf 124);
    printf "%s%s[ERROR] %s %s" "$red" "$bold" "$reset" "$1" 
}
function clnInfo {
    local reset
    local bold
    local cyan
    reset=$(tput sgr0);
    bold=$(tput bold);
    cyan=$(tput setaf 39);
    printf "%s%s[INFO] %s %s\n" "$cyan" "$bold" "$reset" "$1" 
}
function clnError {
    local reset
    local bold
    local red
    reset=$(tput sgr0);
    bold=$(tput bold);
    red=$(tput setaf 124);
    printf "%s%s[ERROR] %s %s\n" "$red" "$bold" "$reset" "$1" 
}
function cOk {
    local reset
    local bold
    local green
    reset=$(tput sgr0);
    bold=$(tput bold);
    green=$(tput setaf 34);
    printf "%s%s OK \n%s" "$green" "$bold" "$reset" 
}
function cItalic {
    local cyan
    local italic
    local reset
    cyan=$(tput setaf 39);
    italic=$(tput sitm);
    reset=$(tput sgr0);
    printf "%s%s %s %s %s" "$cyan" "$italic" "$1" "$reset" "$2"
}
function clnItalic {
    local cyan
    local italic
    local reset
    cyan=$(tput setaf 39);
    italic=$(tput sitm);
    reset=$(tput sgr0);
    printf "%s%s %s %s %s\n" "$cyan" "$italic" "$1" "$reset" "$2"
}
# }}}

function make_dirs(){
    folder_list="$HOME/.local/opt" 
    folder_list+=" $HOME/.local/share/fonts" 
    folder_list+=" $HOME/.wallpapers" 
    folder_list+=" $HOME/.ssh" 
    folder_list+=" $HOME/.cache" 
    folder_list+=" $HOME/Documents/Projects/git" 
    folder_list+=" $HOME/.vim/backups" 
    folder_list+=" $HOME/.vim/backups/swaps" 
    folder_list+=" $HOME/.vim/backups/undo" 
    folder_list+=" $HOME/.vim/bundle" 
    folder_list+=" $HOME/.vim/autoload" 
    folder_list+=" $HOME/.config-bkp" 
    cInfo "Creating folders\r\n"
    for Folder in $folder_list
    do
	if [ -d "$Folder" ] 
	then
	    cInfo
	    clnItalic "$Folder" "Already exists."
	else
	    mkdir -p "$Folder"
	    cInfo
	    clnItalic "$Folder" "Folders created." 
	fi
    done
    printf "[INFO] Creating folders: Done\n"
}
function config_git() {
    #setup git(script from https://github.com/lewagon/dotfiles/git_setup.sh )
    if command -v git &> /dev/null
    then
	git config --global user.email "$1"
	git config --global user.name "$2"
	cInfo "Add git config:"
	cOk
    else
	clnError "Add git config: Git installation needed. Run apt-get install git or read output for problems"
	exit 1
    fi
}
function config_ssh() {
    #setup ssh
    #by  nishanthshanmugham and lhunath  
    #in https://stackoverflow.com/questions/592620/how-can-i-check-if-a-program-exists-from-a-bash-script
    if command -v ssh &> /dev/null
    then
	 
	if [ -f "$HOME/.ssh/id_ed25519" ] 
	then
	    clnInfo "Creating pub keys: ssh-agent in use."
	else
	    eval ssh-keygen -t ed25519 -C "$1";  wait $!
	    eval "$(ssh-agent -s)" ssh-add "$HOME/.ssh/id_ed25519"
	fi
	cInfo "Create pub keys: "
	cOk
    else
	clnError "Creating pub keys: SSH installation needed. Install ssh or read output for problems"
	exit 2 
    fi
}
make_dirs
config_git "$1" "$2"
config_ssh "$1"
clnInfo "Enviroment installed"
