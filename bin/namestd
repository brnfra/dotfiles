#!/usr/bin/env bash
# Arquivo: namestd
# Autor: Bruno Franco
# Download: git@github.com:brnfra
# Licence:Este arquivo é de domínio público
# Garantia: O autor não se responsabiliza por eventuais danos
#           causados pelo uso deste script.
#change names for standard. Ex.: 's p c' => s_p_c; and so on...
#The changes is restrict on the folder where the script was executed
#first, make some general changes, just in case(remove spaces)
# shellcheck source=dotfiles_env
. dotfiles_env

printf "Normalizing files and folders names\n"

if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP
${0##*/}

NAME
    ${0##*/}  - standarize names 

SYNOPSIS
    ${0##*/} {[-aAh] | --help}

DESCRIPTION
    Change names for standard. Ex.: 's p c' => s_p_c; and so on...

Examples: 
    To rename all files and folders on current path
        ${0##*/}	
    To rename all files and folders recursively inside folders
        ${0##*/} -a	
        ${0##*/} -A	

OPTIONS    
    -a, -A	
        Rename all files and folders recursively inside folders

    -h, --help
        Print help informations

See the README for documentation.
https://github.com/brnfra/dotfiles
Licensed under the MIT license.
HELP
exit; fi

stdnames() {    #{{{
    #	${variable//search/replace}
    local OLD=$1
    local NAME=$1
    local COUNT=$(( 1 ))
    NAME=${NAME//'$'/_}
    NAME=$(echo "$NAME" | tr -d '[:cntrl:]')
    NAME=$(echo "$NAME" | tr -c '[=.=][=/=][:alnum:]' '_')
    NAME=$(echo "$NAME" | tr -t '[:space:][:blank:]' '_')
    NAME=$(echo "$NAME" | tr -s '_' '_' )
    NAME=$(echo "$NAME" | tr -s '.' '.' )
    NAME=$(echo "$NAME" | sed -r 's/^_//gi; s/_$//gi')
    NAME=$(iconv -c -f UTF8 -t ASCII//TRANSLIT<<< "$NAME")
    TEST_NAME=$(find "$NAME" -maxdepth 0 |sed 's|\.\/||gi')
    if [[ $NAME == "" ]]; then
        NAME="new_renamed"
    fi

#    coding to ascII remove latin chars
if [[ "$NAME" != "$OLD" ]]; then
    eval "cp -r $OLD $HOME/.local/share/Trash/files"   &>/dev/null
    eval "mv -n $OLD $NAME"  &>/dev/null
else
    while [[ "$TEST_NAME" == "$NAME" ]] && [[ "$NAME" != "$OLD" ]] ; do
        COUNT=$(( COUNT + 1))
        NAME=${NAME%-*}
        NAME="${NAME}-$COUNT"
        TEST_NAME=$(find "$NAME" -maxdepth 0 | -type f -exec ls -A -1 --quoting-style='shell-escape' '{}' + |  sed 's|\.\/||gi')
        eval "cp -r $OLD $HOME/.local/share/Trash/files"   &>/dev/null
        eval "mv -n $OLD $NAME"  &>/dev/null
    done
fi

}
#}}}
show_result() { #{{{

    if [[ "$1" == "-a" ]] || [[ "$1" == "-A" ]]; then
        FILES_AFTER=$(find . -type f -exec ls -A -1 --quoting-style='shell-escape' '{}' + | sed 's|\.\/||gi' | sort )
        FOLDERS_AFTER=$(find . -type d -exec ls -A -1 -p --quoting-style='shell-escape' '{}' + | sed -n '/\/$/p' | sed 's|\.\/||gi; s|\/$||gi' | sort)
    else
        FILES_AFTER=$(find . -maxdepth 1 -type f -exec ls -A -1 --quoting-style='shell-escape' '{}' + | sed 's|\.\/||gi' | sort)
        FOLDERS_AFTER=$(find . -maxdepth 0 -type d -exec ls -A -1 -p --quoting-style='shell-escape' '{}' + | sed -n '/\/$/p' | sed 's|\.\/||gi; s|\/$||gi' | sort)
    fi

    DEFAULT_IFS=$IFS
    IFS=$'\n'

    folders_after=( $FOLDERS_AFTER )
    folders_before=( $FOLDERS_BEFORE )
    files_after=( $FILES_AFTER )
    files_before=( $FILES_BEFORE )

    IFS=$DEFAULT_IFS

    lenght=${#folders_before[@]}
    if (( lenght > 0 ));then
        printf "\n%s\n" "Folder Changes"
        for(( i=0; i < lenght; i++)); do
            if ! [ "${folders_before[$i]}" = "${folders_after[$i]}" ]; then
                printf "[ ${red}%s${reset} ]" "${folders_before[$i]}" 
                printf "%s" "---->"
                printf "[ ${green}${bold}%s${reset} ]\n" "${folders_after[$i]}"
            fi
        done

    fi
    lenght=${#files_before[@]}
    if (( lenght > 0 ));then
        printf "\n%s\n" "Files Changes"
        for(( i=0; i < lenght; i++)); do
            if ! [ "${files_before[$i]}" = "${files_after[$i]}" ]; then
                printf "[ ${red}%s${reset} ]" "${files_before[$i]}" 
                printf "%s" "---->" 
                printf "[ ${green}${bold}%s${reset} ]\n" "${files_after[$i]}"
            fi
        done
    fi
    echo
}
#}}}
LOCAL=$(pwd)
if [ "$LOCAL" = "$HOME" ]; then
    printf "Script avoid execute in [%s] directory.\n" "$HOME"
    exit 1
fi

if [[ "$1" == "-a" ]] || [[ "$1" == "-A" ]]; then
    FILES_BEFORE=$(find . -type f -exec ls -A -1 --quoting-style='shell-escape' '{}' + | sed 's|\.\/||gi' | sort )
    FOLDERS_BEFORE=$(find . -type d -exec ls -A -1 -p --quoting-style='shell-escape' '{}' + | sed -n '/\/$/p' | sed 's|\.\/||gi; s|\/$||gi' | sort)

    NAMES=$(find . -type f -exec ls -A -1 --quoting-style='shell-escape' '{}' + | sed 's|\.\/||gi')
    NAMES+=$'\n'
    NAMES+=$(find . -type d -exec ls -A -1 -p --quoting-style='shell-escape' '{}' + | sed -n '/\/$/p' | sed 's|\.\/||gi; s|\/$||gi')
else
    FILES_BEFORE=$(find . -maxdepth 1 -type f -exec ls -A -1 --quoting-style='shell-escape' '{}' + | sed 's|\.\/||gi' | sort)
    FOLDERS_BEFORE=$(find . -maxdepth 0 -type d -exec ls -A -1 -p --quoting-style='shell-escape' '{}' + | sed -n '/\/$/p' | sed 's|\.\/||gi; s|\/$||gi' | sort)

    NAMES=$(find . -maxdepth 1 -type f -exec ls -A -1 --quoting-style='shell-escape' '{}' + | sed 's|\.\/||gi')
    NAMES+=$'\n'
    NAMES+=$(find . -maxdepth 0 -type d -exec ls -A -1 -p --quoting-style='shell-escape' '{}' + | sed -n '/\/$/p' | sed 's|\.\/||gi; s|\/$||gi')

fi

DEFAULT_IFS=$IFS
IFS=$'\n'
names=( $NAMES )
IFS=$DEFAULT_IFS

lenght=${#names[@]}
for(( i=0; i < lenght; i++))
do
    stdnames "${names[$i]}"
done

show_result "$1"
