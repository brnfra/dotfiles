#!/usr/bin/env bash
#  Arquivo: stage_config
#  Autor: Bruno Franco
#  Ultima_modificacao: 06-11-2023
#  Download: git@github.com:brnfra
#  Licence:Este arquivo é de domínio público
#  Garantia: O autor não se responsabiliza por            eventuais danos
#            causados pelo uso deste arquivo.
for file in ~/bin/{local_repo_pull,ssh_config,dotfiles_env,git_config}; do
    [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;

cInfo "Pull last changes and Sync bare and cloned configs" "Stage config"

backto=$(pwd)
DATE=$(date +%d/%m/%Y-%H:%M:%S)

#add and commit
commit_last ()
{
    bareModfied=$(git_bare status -s | cut -d " " -f 3)
    repoModfied=$(git_repo status -s | cut -d " " -f 3)

    cInfo "git bare repo file to add:" 
    for file in $bareModfied
    do
	cInfo "add:" "$file"
	git_bare add "$file"
    done
    
    cInfo "git cloned repo file to add:" 
    for file in $repoModfied
    do
	git_repo add "$dotfiles_dir/""$file" 
    done
   
    git_bare commit -m "${1:-"refact: update dot files, dir or scripts"}"
    git_repo commit -m "${1:-"refact: update dot files, dir or scripts"}"
    cInfo "Commit message:" "${1:-"refact: update dot files, dir or scripts"}"
}

sync_branch ()
{
    BranchHome="$(git --git-dir="$install_dir" --work-tree="$HOME" describe --all --exact-match HEAD | cut -d "/" -f 2 )";
    RepoBranch="$(git --git-dir=$dotfiles_dir/.git describe --all --exact-match HEAD | cut -d "/" -f 2)";
    if [ "$BranchHome" != "$RepoBranch" ]; then
        clnInfo "Branch home and dotfiles aren't the same:"
	if eval "git --git-dir=$dotfiles_dir/.git checkout $BranchHome"; then
	    cmOk "Branches are the same."
	    echo
	else
	    cError "Can't change branch in $dotfiles_dir. Aborting. BranchHome and RepoBranch:" "$BranchHome and $RepoBranch"
	    exit 2
	fi
    else
	cmOk "Branches are the same."
	echo
    fi
}

#function for backup
sync_copy ()
{
    printf "[INFO]Sync beginning at %s\n" "$DATE" > "$bkpLog"
    # bash
    files='.bashrc .bash/ '
    files+='README.md '
    # vim
    files+='.vimrc .config/nvim/ '
    # vifm
    files+='.config/vifm/vifmrc  '
    files+='.config/vifm/scripts/ '
    files+='.config/vifm/colors/ '
    # terminalrc=
    files+='.config/xfce4/terminal/terminalrc '
    # i3
    files+='.i3/ '
    files+='.i3/autostart/ '
    files+='.i3/i3blocks/ '
    # rofi
    files+='.config/rofi/ .config/rofi/themes/ '
    # gsimplecal
    files+='.config/gsimplecal/config '
    # systemrc
    files+='.wgetrc .curlrc dotfilesTest.sh'
    # git
    files+='.gitconfig '
    files+='.git-completion.bash '
    # compton
    files+='.config/compton/ '
    # tmux
    files+='.tmux.conf '
    # scripts
    files+='bin/ '
    # test
    files+='tests/ '
    for file in $files; do
	printf "[INFO] Files or folder to stage: (%s)\n" "$file" &>> "$bkpLog"
	newDir=$dotfiles_dir/$file
	mkdir -p "$(echo ${newDir%/*})"
	rsync -va --exclude '*.backup' -b --backup-dir="$bkpdir"  "$HOME"/"$file" "$dotfiles_dir"/"$file" &>> "$bkpLog"
	printf "[INFO] Files to stage: (%s), Done!\n" "$file" &>> "$bkpLog"
    done
}

cd "$HOME/tests" || return
printf "\r"
sync_branch

if "$checkAll" &>> "$bkpLog"; then
    cmOk "Files,scripts tests and folders check"

    if connection &> /dev/null && ssh_connect ;then
	cmOk "Connection and ssh_connect check:"
	sync_copy
	printf "[INFO] Sync accomplished at %s\n" "$DATE" &>> "$bkpLog"
	
	commit_last "$1"
	#local_repo_pull

	cd "$backto" || return
	exit 0

    elif connection &> /dev/null; then
	cmOk "Connection"
	clnError "Check your ssh-agent." &>> "$bkpLog"
	exit 2

    elif ssh_connect ;then
	cmOk "ssh-agent"
	clnError "Check your connection." &>> "$bkpLog"
	exit 3

    else
	clnError "Check your connection and your ssh-agent." &>> "$bkpLog"
	exit 4
    fi

else
    "$checkAll" | awk '/FAIL/''{print}' &>> "$bkpLog"
    cInfo "If error occured check backup log in:" "$bkpLog" "Done."

    cd "$backto" || return
    exit 1
fi
