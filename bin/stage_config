#!/usr/bin/env bash
#  Arquivo: stage_config
#  Autor: Bruno Franco
#  Ultima_modificacao: 09-11-2023
#  Download: git@github.com:brnfra
#  Licence:Este arquivo é de domínio público
#  Garantia: O autor não se responsabiliza por            eventuais danos
#            causados pelo uso deste arquivo.
for file in ~/bin/{ssh_config,dotfiles_env,git_config,config_check}; do
    [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;

#add and commit {{{
commit_last ()
{
    bareModfied=$(git_bare status -s | cut -d " " -f 3)
    repoModfied=$(git_repo status -s | cut -d " " -f 3)

    cInfo "git bare repo file to add:" 
    for file in $bareModfied
    do
	cInfo "add:" "$file"
	git_bare add "$file"
    done

    cInfo "git cloned repo file to add:" 
    for file in $repoModfied
    do
	git_repo add "$dotfiles_dir/""$file" 
    done

    git_bare commit -m "${1:-"refact: update dot files, dir or scripts"}"
    git_repo commit -m "${1:-"refact: update dot files, dir or scripts"}"
    cInfo "Commit message:" "${1:-"refact: update dot files, dir or scripts"}"
}
##}}}
#sync_branch {{{ 
sync_branch ()
{
    BranchHome="$(git --git-dir="$install_dir" --work-tree="$HOME" describe --all --exact-match HEAD | cut -d "/" -f 2 )";
    RepoBranch="$(git --git-dir=$dotfiles_dir/.git describe --all --exact-match HEAD | cut -d "/" -f 2)";

    Branch_dotfile_home="$(cat $HOME/bin/dotfiles_env | awk /branch=/'{print $1}' | sed 's/branch="//g;s/"//g')" # I: Double quote to prevent globbing and word splitting.
    Repo_dotfile_branch="$(cat $dotfiles_dir/bin/dotfiles_env | awk /branch=/'{print $1}' | sed 's/branch="//g;s/"//g')" # W: dotfiles_dir is referenced but not assigned.

    env_home_dotfiles="$HOME/bin/dotfiles_env"   
    repo_env_dotfiles="$dotfiles_dir/bin/dotfiles_env"

    if [ "$BranchHome" != "$RepoBranch" ]; then
	clnInfo "Branch home and dotfiles aren't the same:"
	if git --git-dir=$dotfiles_dir/.git --work-tree=$dotfiles_dir checkout $BranchHome;then
	    cmOk "Branches are the same."
	    echo
	else
	    cError "Can't change branch in $dotfiles_dir. Aborting. BranchHome and RepoBranch:" "$BranchHome and $RepoBranch"
	    exit 2
	fi
    else
	cmOk "Branches are the same."
	echo
    fi

    if [ "$Branch_dotfile_home" != "$BranchHome" ]; then
	clnInfo "Branch name and dotfiles_env branch definition aren't the same:"
	sed -i "s/branch=\"$Branch_dotfile_home\"/branch=\"$BranchHome\"/" "$env_home_dotfiles"
    elif [ "$Repo_dotfile_branch" != "$RepoBranch" ]; then
	clnInfo "Branch name and dotfiles_env branch definition aren't the same:"
	sed -i "s/branch=\"$Repo_dotfile_branch\"/branch=\"$RepoBranch\"/" "$repo_env_dotfiles"
    fi
}
##}}}
#function for backup {{{ 
sync_copy ()
{
    printf "[INFO]Sync beginning at %s\n" "$DATE" >> "$bkpLog"
    # bash
    files='.bashrc .bash/ '
    files+='README.md '
    # vim
    files+='.vimrc .config/nvim/ '
    # vifm
    files+='.config/vifm/vifmrc  '
    files+='.config/vifm/scripts/ '
    files+='.config/vifm/colors/ '
    # terminalrc=
    files+='.config/xfce4/terminal/terminalrc '
    # i3
    files+='.i3/ '
    files+='.i3/autostart/ '
    files+='.i3/i3blocks/ '
    # rofi
    files+='.config/rofi/ .config/rofi/themes/ '
    # gsimplecal
    files+='.config/gsimplecal/config '
    # systemrc
    files+='.wgetrc .curlrc dotfilesTest.sh '
    # git
    files+='.gitconfig '
    files+='.git-completion.bash '
    # compton
    files+='.config/compton/ '
    # tmux
    files+='.tmux.conf '
    # scripts
    files+='bin/ '
    # test
    files+='tests/ '
    for file in $files; do
	printf "[INFO] Files or folder to stage: (%s)\n" "$file" &>> "$bkpLog"
	newDir=$dotfiles_dir/$file
	mkdir -p "$(echo ${newDir%/*})"
	rsync -va --exclude '*.backup' -b --backup-dir="$bkpdir"  "$HOME"/"$file" "$dotfiles_dir"/"$file" &>> "$bkpLog"
	printf "[INFO] Files to stage: (%s), Done!\n" "$file" &>> "$bkpLog"
    done
}
##}}}
prepare() {
    cInfo "Pull last changes and Sync bare and cloned configs" "Stage config"
    backto=$(pwd)
    DATE=$(date +%d/%m/%Y-%H:%M:%S)
    cd "$HOME" || return

    sync_branch

    if config_check tests -a ; then
	cmOk "Files,scripts tests and folders check"

	if connection &> /dev/null && ssh_connect &> /dev/null;then
	    cmOk "Connection and ssh_connect check:"
	    sync_copy
	    printf "[INFO] Sync accomplished at %s\n" "$DATE" &>> "$bkpLog"

	    commit_last "$1"

	    cd "$backto" || return
	    exit 0

	elif connection &> /dev/null; then
	    cmOk "Connection"
	    clnError "Check your ssh-agent." &>> "$bkpLog"
	    exit 2

	elif ssh_connect &> /dev/null;then
	    cmOk "ssh-agent"
	    clnError "Check your connection." &>> "$bkpLog"
	    exit 3

	else
	    clnError "Check your connection and your ssh-agent." &>> "$bkpLog"
	    exit 4
	fi

    else
	config_check tests -a | awk '/FAIL/''{print}' &>> "$bkpLog"
	cInfo "If error occured check backup log in:" "$bkpLog" "Done."

	cd "$backto" || return
	exit 5
    fi
}

"$@" 2> /dev/null
