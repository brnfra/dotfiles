#!/usr/bin/env bash
#  Arquivo: stage_config
#  Autor: Bruno Franco
#  Ultima_modificacao: 03-11-2023
#  Download: git@github.com:brnfra
#  Licence:Este arquivo é de domínio público
#  Garantia: O autor não se responsabiliza por            eventuais danos
#            causados pelo uso deste arquivo.
for file in ~/bin/{local_repo_pull,ssh_config,dotfiles_env}; do
    [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;

clnInfo "${0##*/}"

backto=$(pwd)
DATE=$(date +%d/%m/%Y-%H:%M:%S)
bkpLog="$HOME/.config-bkp/stage-bkp.log"

sync_branch ()
{
    BranchHome="$(git --git-dir="$install_dir" --work-tree="$HOME" describe --all --exact-match HEAD | cut -d "/" -f 2 )";
    RepoBranch="$(git --git-dir=$dotfiles_dir/.git describe --all --exact-match HEAD | cut -d "/" -f 2)";
    if [ "$BranchHome" != "$RepoBranch" ]; then
        clnInfo "Branch home and dotfiles aren't the same:"
	eval "git --git-dir=$dotfiles_dir/.git checkout $BranchHome"
	echo
    else
	cmOk "Branches are the same."
	echo
    fi
}

#function for backup
sync_copy ()
{
    printf "[INFO]Sync beginning at %s\n" "$DATE" > "$bkpLog"
    # bash
    files='.bashrc .bash/ '
    files+='README.md '
    # vim
    files+='.vimrc .config/nvim/ '
    # vifm
    files+='.config/vifm/vifmrc  '
    files+='.config/vifm/scripts/ '
    files+='.config/vifm/colors/ '
    # terminalrc=
    files+='.config/xfce4/terminal/terminalrc '
    # i3
    files+='.i3/ '
    files+='.i3/autostart/ '
    files+='.i3/i3blocks/ '
    # rofi
    files+='.config/rofi/ .config/rofi/themes/ '
    # gsimplecal
    files+='.config/gsimplecal/config '
    # systemrc
    files+='.wgetrc .curlrc dotfilesTest.sh'
    # git
    files+='.gitconfig '
    files+='.git-completion.bash '
    # compton
    files+='.config/compton/ '
    # tmux
    files+='.tmux.conf '
    # scripts
    files+='bin/ '
    # test
    files+='tests/ '
    for file in $files; do
	printf "[INFO] Files or folder to stage: (%s)\n" "$file" &>> "$bkpLog"
	newDir=$dotfiles_dir/$file
	mkdir -p "$(echo ${newDir%/*})"
	rsync -va --exclude '*.backup' -b --backup-dir="$bkpdir"  "$HOME"/"$file" "$dotfiles_dir"/"$file" &>> "$bkpLog"
	printf "[INFO] Files to stage: (%s), Done!\n" "$file" &>> "$bkpLog"
    done
}

cd "$HOME/tests" || return
cInfo "Files,scripts tests and folders checking"
printf "\r"
sync_branch

if "$checkAll" &> /dev/null; then
    cmOk "Files,scripts tests and folders check"

    if connection &> /dev/null && ssh_connect ;then
	#pull from remote to local before make changes
	local_repo_pull
	sync_copy

	printf "[INFO] Sync accomplished at %s\n" "$DATE" &>> "$bkpLog"
	cd "$backto" || return
	exit 0

    elif connection &> /dev/null; then
	cmOk "Connection"
	clnError "Check your ssh-agent."
	exit 2

    elif ssh_connect ;then
	cmOk "ssh-agent"
	clnError "Check your connection."
	exit 3

    else
	clnError "Check your connection and your ssh-agent."
	exit 4
    fi

else
    "$checkAll" | awk '/FAIL/''{print}' &>> "$bkpLog"
    cInfo "If error occured check backup log in:"
    clnItalic "$bkpLog" "Done."

    cd "$backto" || return
    exit 1
fi
