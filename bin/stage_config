#!/usr/bin/env bash
#  Arquivo: stage_config
#  Autor: Bruno Franco
#  Ultima_modificacao: 08-04-2025
#  Download: git@github.com:brnfra
#  Licence:Este arquivo é de domínio público
#  Garantia: O autor não se responsabiliza por            eventuais danos
#            causados pelo uso deste arquivo.
for file in ~/bin/{ssh_config,dotfiles_env,git_config,config_check}; do
    [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;

#add and commit {{{
commit_last (){
    DATE=$(date +%d/%m/%Y-%H:%M:%S)
    printf "[INFO]%s at %s \n" "${0##*/} - ${FUNCNAME[0]}" "$DATE" >> "$bkpLog"
    
    bareModfied=$(git_bare status -s | awk '{print $2}')
    repoModfied=$(git_repo status -s | awk '{print $2}')

    cInfo "git bare repo file to add:" 
    for file in $bareModfied
    do
	cInfo "add:" "$file" 
	git_bare add "$file" &>> "$bkpLog"

    done

    cInfo "git cloned repo file to add:" 
    for file in $repoModfied
    do
	git_repo add "$dotfiles_dir/$file"  &>> "$bkpLog"

    done

    git_bare commit -m "${1:-"refact: update dot files, dir or scripts"}" &>> "$bkpLog"
    git_repo commit -m "${1:-"refact: update dot files, dir or scripts"}" &>> "$bkpLog"
    cInfo "Commit message:" "${1:-"refact: update dot files, dir or scripts"}"
    DATE=$(date +%d/%m/%Y-%H:%M:%S)
    printf "[INFO]%s at %s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}" "$DATE" >> "$bkpLog"
}
##}}}
#branch_sync - check if bare branch = cloned branch {{{ 
branch_sync () {
    DATE=$(date +%d/%m/%Y-%H:%M:%S)
    printf "[INFO]%s at %s \n" "${0##*/} - ${FUNCNAME[0]}" "$DATE" >> "$bkpLog"
    BranchHome="$(git --git-dir="$install_dir" --work-tree="$HOME" describe --all --exact-match HEAD | cut -d "/" -f 2 )";
    RepoBranch="$(git --git-dir=$dotfiles_dir/.git describe --all --exact-match HEAD | cut -d "/" -f 2)";

    Branch_dotfile_home="$(cat $HOME/bin/dotfiles_env | awk /branch=/'{print $1}' | sed 's/branch="//g;s/"//g')" # I: Double quote to prevent globbing and word splitting.
    Repo_dotfile_branch="$(cat $dotfiles_dir/bin/dotfiles_env | awk /branch=/'{print $1}' | sed 's/branch="//g;s/"//g')" # W: dotfiles_dir is referenced but not assigned.

    env_home_dotfiles="$HOME/bin/dotfiles_env"   
    repo_env_dotfiles="$dotfiles_dir/bin/dotfiles_env"

    if [ "$BranchHome" != "$RepoBranch" ]; then
	clnInfo "Branch home and dotfiles aren't the same:"
	if git --git-dir=$dotfiles_dir/.git --work-tree=$dotfiles_dir checkout $BranchHome &>> "$bkpLog" && \
	    git --git-dir=$install_dir --work-tree=$HOME checkout $BranchHome &>> "$bkpLog";then
	    cmOk "Branches are the same."
	    echo
	else
	    cError "Can't change branch in $dotfiles_dir. Aborting. BranchHome and RepoBranch:" "$BranchHome and $RepoBranch"
	    printf "[INFO]Branches are't the same.Can't change branch.\n"  >> "$bkpLog"
	    exit 2
	fi
    else
	cmOk "Branches are the same."
	printf "[INFO]Branches are the same.\n"  >> "$bkpLog"
	echo
    fi

    if [ "$Branch_dotfile_home" != "$BranchHome" ]; then
	clnInfo "Branch name and dotfiles_env branch definition aren't the same:"
	sed -i "s/branch=\"$Branch_dotfile_home\"/branch=\"$BranchHome\"/" "$env_home_dotfiles"
    elif [ "$Repo_dotfile_branch" != "$RepoBranch" ]; then
	clnInfo "Branch name and dotfiles_env branch definition aren't the same:"
	sed -i "s/branch=\"$Repo_dotfile_branch\"/branch=\"$RepoBranch\"/" "$repo_env_dotfiles"
    fi
    DATE=$(date +%d/%m/%Y-%H:%M:%S)
    printf "[INFO]%s at %s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}" "$DATE" >> "$bkpLog"
}
##}}}
#sync_copy - function for backup {{{ 
sync_copy () {

    DATE=$(date '+%d_%m_%Y')
    printf "[INFO]%s at %s \n" "${0##*/} - ${FUNCNAME[0]}" "$DATE" >> "$bkpLog"

    for file in $files; do
	printf "[INFO] Files or folder to stage: (%s)\n" "$file" &>> "$bkpLog"
	newDir=$dotfiles_dir/$file
	mkdir -p "$(echo ${newDir%/*})"
	rsync -va --exclude '*.backup' -b --backup-dir="$bkpdir"  "$HOME"/"$file" "$dotfiles_dir"/"$file" \
	    | sed '/^$/d;/./!d' &>> "$bkpLog"
	echo >>"$bkpLog"
    done

    for dir in $Dirs; do
	printf "[INFO] Folder to backup: (%s)\n" "$dir" &>> "$bkpLog"
	newDir=$dotfiles_dir/$dir
	mkdir -p "$(echo ${newDir%/*})"
	rsync -va --exclude '*.backup' -b --backup-dir="$bkpdir"  "$HOME"/"$dir" "$dotfiles_dir"/"$dir" \
	    | sed '/^$/d;/./!d' &>> "$bkpLog"
	echo >>"$bkpLog"
    done

    echo >>"$bkpLog"

    printf "\n[INFO]%s [STOP %s]\n\n" "${0##*/} - ${FUNCNAME[0]}" "$DATE"  >> "$bkpLog"
    cInfo "Done!" "${0##*/} - ${FUNCNAME[0]}"

}
##}}}
#prepare{{{
prepare() {
    DATE=$(date +%d/%m/%Y-%H:%M:%S)
    printf "[INFO]%s at %s \n" "${0##*/} - ${FUNCNAME[0]}" "$DATE" >> "$bkpLog"
    cInfo "Pull last changes and Sync bare and cloned configs" "Stage config"
    backto=$(pwd)
    DATE=$(date +%d/%m/%Y-%H:%M:%S)
    cd "$HOME" || return

    branch_sync

    if config_check tests -a ; then
	cmOk "Files,scripts tests and folders check"

	if connection &> /dev/null && ssh_connect &> /dev/null;then
	    cmOk "Connection and ssh_connect check:"
	    sync_copy
	    printf "[INFO] Sync accomplished at %s\n" "$DATE" &>> "$bkpLog"

	    commit_last "$1"

	    cd "$backto" || return

	elif connection &> /dev/null; then
	    cmOk "Connection"
	    clnError "Check your ssh-agent." &>> "$bkpLog"
	    exit 2

	elif ssh_connect &> /dev/null;then
	    cmOk "ssh-agent"
	    clnError "Check your connection." &>> "$bkpLog"
	    exit 3

	else
	    clnError "Check your connection and your ssh-agent." &>> "$bkpLog"
	    exit 4
	fi

    else
	config_check tests -a  &>> "$bkpLog"
	cInfo "Error occured, check backup log in:" "$bkpLog" "Done."

	cd "$backto" || return
	exit 5
    fi
    DATE=$(date +%d/%m/%Y-%H:%M:%S)
    printf "[INFO]%s at %s [DONE]\n" "${0##*/} - ${FUNCNAME[0]}" "$DATE" >> "$bkpLog"
}
#}}}

case $1 in
    commit_last) "$@"; exit;;
    prepare) "$@"; exit;;
    sync_copy) "$@"; exit;;
    branch_sync) "$@"; exit;;
esac
